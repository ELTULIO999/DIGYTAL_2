

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sat Feb 13 02:44:02 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 2.20
    41                           ; Generated 12/02/2020 GMT
    42                           ; 
    43                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F887 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0008                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  000E                     	;# 
    90  000F                     	;# 
    91  0010                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0013                     	;# 
    95  0014                     	;# 
    96  0015                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  001A                     	;# 
   103  001B                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  001D                     	;# 
   107  001E                     	;# 
   108  001F                     	;# 
   109  0081                     	;# 
   110  0085                     	;# 
   111  0086                     	;# 
   112  0087                     	;# 
   113  0088                     	;# 
   114  0089                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  008F                     	;# 
   119  0090                     	;# 
   120  0091                     	;# 
   121  0092                     	;# 
   122  0093                     	;# 
   123  0093                     	;# 
   124  0093                     	;# 
   125  0094                     	;# 
   126  0095                     	;# 
   127  0096                     	;# 
   128  0097                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009B                     	;# 
   133  009C                     	;# 
   134  009D                     	;# 
   135  009E                     	;# 
   136  009F                     	;# 
   137  0105                     	;# 
   138  0107                     	;# 
   139  0108                     	;# 
   140  0109                     	;# 
   141  010C                     	;# 
   142  010C                     	;# 
   143  010D                     	;# 
   144  010E                     	;# 
   145  010F                     	;# 
   146  0185                     	;# 
   147  0187                     	;# 
   148  0188                     	;# 
   149  0189                     	;# 
   150  018C                     	;# 
   151  018D                     	;# 
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0008                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  000E                     	;# 
   168  000F                     	;# 
   169  0010                     	;# 
   170  0011                     	;# 
   171  0012                     	;# 
   172  0013                     	;# 
   173  0014                     	;# 
   174  0015                     	;# 
   175  0015                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001B                     	;# 
   183  001C                     	;# 
   184  001D                     	;# 
   185  001E                     	;# 
   186  001F                     	;# 
   187  0081                     	;# 
   188  0085                     	;# 
   189  0086                     	;# 
   190  0087                     	;# 
   191  0088                     	;# 
   192  0089                     	;# 
   193  008C                     	;# 
   194  008D                     	;# 
   195  008E                     	;# 
   196  008F                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0093                     	;# 
   201  0093                     	;# 
   202  0093                     	;# 
   203  0094                     	;# 
   204  0095                     	;# 
   205  0096                     	;# 
   206  0097                     	;# 
   207  0098                     	;# 
   208  0099                     	;# 
   209  009A                     	;# 
   210  009B                     	;# 
   211  009C                     	;# 
   212  009D                     	;# 
   213  009E                     	;# 
   214  009F                     	;# 
   215  0105                     	;# 
   216  0107                     	;# 
   217  0108                     	;# 
   218  0109                     	;# 
   219  010C                     	;# 
   220  010C                     	;# 
   221  010D                     	;# 
   222  010E                     	;# 
   223  010F                     	;# 
   224  0185                     	;# 
   225  0187                     	;# 
   226  0188                     	;# 
   227  0189                     	;# 
   228  018C                     	;# 
   229  018D                     	;# 
   230  0000                     	;# 
   231  0001                     	;# 
   232  0002                     	;# 
   233  0003                     	;# 
   234  0004                     	;# 
   235  0005                     	;# 
   236  0006                     	;# 
   237  0007                     	;# 
   238  0008                     	;# 
   239  0009                     	;# 
   240  000A                     	;# 
   241  000B                     	;# 
   242  000C                     	;# 
   243  000D                     	;# 
   244  000E                     	;# 
   245  000E                     	;# 
   246  000F                     	;# 
   247  0010                     	;# 
   248  0011                     	;# 
   249  0012                     	;# 
   250  0013                     	;# 
   251  0014                     	;# 
   252  0015                     	;# 
   253  0015                     	;# 
   254  0016                     	;# 
   255  0017                     	;# 
   256  0018                     	;# 
   257  0019                     	;# 
   258  001A                     	;# 
   259  001B                     	;# 
   260  001B                     	;# 
   261  001C                     	;# 
   262  001D                     	;# 
   263  001E                     	;# 
   264  001F                     	;# 
   265  0081                     	;# 
   266  0085                     	;# 
   267  0086                     	;# 
   268  0087                     	;# 
   269  0088                     	;# 
   270  0089                     	;# 
   271  008C                     	;# 
   272  008D                     	;# 
   273  008E                     	;# 
   274  008F                     	;# 
   275  0090                     	;# 
   276  0091                     	;# 
   277  0092                     	;# 
   278  0093                     	;# 
   279  0093                     	;# 
   280  0093                     	;# 
   281  0094                     	;# 
   282  0095                     	;# 
   283  0096                     	;# 
   284  0097                     	;# 
   285  0098                     	;# 
   286  0099                     	;# 
   287  009A                     	;# 
   288  009B                     	;# 
   289  009C                     	;# 
   290  009D                     	;# 
   291  009E                     	;# 
   292  009F                     	;# 
   293  0105                     	;# 
   294  0107                     	;# 
   295  0108                     	;# 
   296  0109                     	;# 
   297  010C                     	;# 
   298  010C                     	;# 
   299  010D                     	;# 
   300  010E                     	;# 
   301  010F                     	;# 
   302  0185                     	;# 
   303  0187                     	;# 
   304  0188                     	;# 
   305  0189                     	;# 
   306  018C                     	;# 
   307  018D                     	;# 
   308  0000                     	;# 
   309  0001                     	;# 
   310  0002                     	;# 
   311  0003                     	;# 
   312  0004                     	;# 
   313  0005                     	;# 
   314  0006                     	;# 
   315  0007                     	;# 
   316  0008                     	;# 
   317  0009                     	;# 
   318  000A                     	;# 
   319  000B                     	;# 
   320  000C                     	;# 
   321  000D                     	;# 
   322  000E                     	;# 
   323  000E                     	;# 
   324  000F                     	;# 
   325  0010                     	;# 
   326  0011                     	;# 
   327  0012                     	;# 
   328  0013                     	;# 
   329  0014                     	;# 
   330  0015                     	;# 
   331  0015                     	;# 
   332  0016                     	;# 
   333  0017                     	;# 
   334  0018                     	;# 
   335  0019                     	;# 
   336  001A                     	;# 
   337  001B                     	;# 
   338  001B                     	;# 
   339  001C                     	;# 
   340  001D                     	;# 
   341  001E                     	;# 
   342  001F                     	;# 
   343  0081                     	;# 
   344  0085                     	;# 
   345  0086                     	;# 
   346  0087                     	;# 
   347  0088                     	;# 
   348  0089                     	;# 
   349  008C                     	;# 
   350  008D                     	;# 
   351  008E                     	;# 
   352  008F                     	;# 
   353  0090                     	;# 
   354  0091                     	;# 
   355  0092                     	;# 
   356  0093                     	;# 
   357  0093                     	;# 
   358  0093                     	;# 
   359  0094                     	;# 
   360  0095                     	;# 
   361  0096                     	;# 
   362  0097                     	;# 
   363  0098                     	;# 
   364  0099                     	;# 
   365  009A                     	;# 
   366  009B                     	;# 
   367  009C                     	;# 
   368  009D                     	;# 
   369  009E                     	;# 
   370  009F                     	;# 
   371  0105                     	;# 
   372  0107                     	;# 
   373  0108                     	;# 
   374  0109                     	;# 
   375  010C                     	;# 
   376  010C                     	;# 
   377  010D                     	;# 
   378  010E                     	;# 
   379  010F                     	;# 
   380  0185                     	;# 
   381  0187                     	;# 
   382  0188                     	;# 
   383  0189                     	;# 
   384  018C                     	;# 
   385  018D                     	;# 
   386  0000                     	;# 
   387  0001                     	;# 
   388  0002                     	;# 
   389  0003                     	;# 
   390  0004                     	;# 
   391  0005                     	;# 
   392  0006                     	;# 
   393  0007                     	;# 
   394  0008                     	;# 
   395  0009                     	;# 
   396  000A                     	;# 
   397  000B                     	;# 
   398  000C                     	;# 
   399  000D                     	;# 
   400  000E                     	;# 
   401  000E                     	;# 
   402  000F                     	;# 
   403  0010                     	;# 
   404  0011                     	;# 
   405  0012                     	;# 
   406  0013                     	;# 
   407  0014                     	;# 
   408  0015                     	;# 
   409  0015                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001B                     	;# 
   417  001C                     	;# 
   418  001D                     	;# 
   419  001E                     	;# 
   420  001F                     	;# 
   421  0081                     	;# 
   422  0085                     	;# 
   423  0086                     	;# 
   424  0087                     	;# 
   425  0088                     	;# 
   426  0089                     	;# 
   427  008C                     	;# 
   428  008D                     	;# 
   429  008E                     	;# 
   430  008F                     	;# 
   431  0090                     	;# 
   432  0091                     	;# 
   433  0092                     	;# 
   434  0093                     	;# 
   435  0093                     	;# 
   436  0093                     	;# 
   437  0094                     	;# 
   438  0095                     	;# 
   439  0096                     	;# 
   440  0097                     	;# 
   441  0098                     	;# 
   442  0099                     	;# 
   443  009A                     	;# 
   444  009B                     	;# 
   445  009C                     	;# 
   446  009D                     	;# 
   447  009E                     	;# 
   448  009F                     	;# 
   449  0105                     	;# 
   450  0107                     	;# 
   451  0108                     	;# 
   452  0109                     	;# 
   453  010C                     	;# 
   454  010C                     	;# 
   455  010D                     	;# 
   456  010E                     	;# 
   457  010F                     	;# 
   458  0185                     	;# 
   459  0187                     	;# 
   460  0188                     	;# 
   461  0189                     	;# 
   462  018C                     	;# 
   463  018D                     	;# 
   464  0000                     	;# 
   465  0001                     	;# 
   466  0002                     	;# 
   467  0003                     	;# 
   468  0004                     	;# 
   469  0005                     	;# 
   470  0006                     	;# 
   471  0007                     	;# 
   472  0008                     	;# 
   473  0009                     	;# 
   474  000A                     	;# 
   475  000B                     	;# 
   476  000C                     	;# 
   477  000D                     	;# 
   478  000E                     	;# 
   479  000E                     	;# 
   480  000F                     	;# 
   481  0010                     	;# 
   482  0011                     	;# 
   483  0012                     	;# 
   484  0013                     	;# 
   485  0014                     	;# 
   486  0015                     	;# 
   487  0015                     	;# 
   488  0016                     	;# 
   489  0017                     	;# 
   490  0018                     	;# 
   491  0019                     	;# 
   492  001A                     	;# 
   493  001B                     	;# 
   494  001B                     	;# 
   495  001C                     	;# 
   496  001D                     	;# 
   497  001E                     	;# 
   498  001F                     	;# 
   499  0081                     	;# 
   500  0085                     	;# 
   501  0086                     	;# 
   502  0087                     	;# 
   503  0088                     	;# 
   504  0089                     	;# 
   505  008C                     	;# 
   506  008D                     	;# 
   507  008E                     	;# 
   508  008F                     	;# 
   509  0090                     	;# 
   510  0091                     	;# 
   511  0092                     	;# 
   512  0093                     	;# 
   513  0093                     	;# 
   514  0093                     	;# 
   515  0094                     	;# 
   516  0095                     	;# 
   517  0096                     	;# 
   518  0097                     	;# 
   519  0098                     	;# 
   520  0099                     	;# 
   521  009A                     	;# 
   522  009B                     	;# 
   523  009C                     	;# 
   524  009D                     	;# 
   525  009E                     	;# 
   526  009F                     	;# 
   527  0105                     	;# 
   528  0107                     	;# 
   529  0108                     	;# 
   530  0109                     	;# 
   531  010C                     	;# 
   532  010C                     	;# 
   533  010D                     	;# 
   534  010E                     	;# 
   535  010F                     	;# 
   536  0185                     	;# 
   537  0187                     	;# 
   538  0188                     	;# 
   539  0189                     	;# 
   540  018C                     	;# 
   541  018D                     	;# 
   542  0018                     _RCSTAbits	set	24
   543  0008                     _PORTDbits	set	8
   544  0013                     _SSPBUF	set	19
   545  0014                     _SSPCON	set	20
   546  0019                     _TXREG	set	25
   547  0009                     _PORTE	set	9
   548  0008                     _PORTD	set	8
   549  0007                     _PORTC	set	7
   550  0006                     _PORTB	set	6
   551  0005                     _PORTA	set	5
   552  0009                     _PORTEbits	set	9
   553  0001                     _TMR0	set	1
   554  000B                     _INTCONbits	set	11
   555  000C                     _PIR1bits	set	12
   556  008F                     _OSCCONbits	set	143
   557  009A                     _SPBRGH	set	154
   558  0099                     _SPBRG	set	153
   559  0098                     _TXSTAbits	set	152
   560  0088                     _TRISDbits	set	136
   561  0094                     _SSPSTATbits	set	148
   562  0094                     _SSPSTAT	set	148
   563  0081                     _OPTION_REGbits	set	129
   564  0089                     _TRISE	set	137
   565  0088                     _TRISD	set	136
   566  0087                     _TRISC	set	135
   567  0086                     _TRISB	set	134
   568  0085                     _TRISA	set	133
   569  008C                     _PIE1bits	set	140
   570  043B                     _TRISC3	set	1083
   571  043D                     _TRISC5	set	1085
   572  0187                     _BAUDCTLbits	set	391
   573  0189                     _ANSELH	set	393
   574  0188                     _ANSEL	set	392
   575                           
   576                           	psect	strings
   577  0662                     __pstrings:
   578  0662                     stringtab:
   579  0662                     __stringtab:
   580  0662                     stringcode:	
   581                           ;	String table - string pointers are 1 byte each
   582                           
   583  0662                     stringdir:
   584  0662  3006               	movlw	high stringdir
   585  0663  008A               	movwf	10
   586  0664  0804               	movf	4,w
   587  0665  0A84               	incf	4,f
   588  0666  0782               	addwf	2,f
   589  0667                     __stringbase:
   590  0667  3400               	retlw	0
   591  0668                     __end_of__stringtab:
   592  0668                     STR_1:
   593  0668  3441               	retlw	65	;'A'
   594  0669  3444               	retlw	68	;'D'
   595  066A  3443               	retlw	67	;'C'
   596  066B  3420               	retlw	32	;' '
   597  066C  3420               	retlw	32	;' '
   598  066D  3420               	retlw	32	;' '
   599  066E  3454               	retlw	84	;'T'
   600  066F  3445               	retlw	69	;'E'
   601  0670  344D               	retlw	77	;'M'
   602  0671  3450               	retlw	80	;'P'
   603  0672  3420               	retlw	32	;' '
   604  0673  3420               	retlw	32	;' '
   605  0674  3420               	retlw	32	;' '
   606  0675  3443               	retlw	67	;'C'
   607  0676  344F               	retlw	79	;'O'
   608  0677  344E               	retlw	78	;'N'
   609  0678  3454               	retlw	84	;'T'
   610  0679  3400               	retlw	0
   611  067A                     STR_21:
   612  067A  34C2               	retlw	-62
   613  067B  34B0               	retlw	-80
   614  067C  3400               	retlw	0
   615  067D                     STR_22:
   616  067D  3420               	retlw	32	;' '
   617  067E  3400               	retlw	0
   618  067F                     STR_19:
   619  067F  342B               	retlw	43	;'+'
   620  0680  3400               	retlw	0
   621  0681                     STR_20:
   622  0681  342D               	retlw	45	;'-'
   623  0682  3400               	retlw	0
   624  0683                     STR_18:
   625  0683  342E               	retlw	46	;'.'
   626  0684  3400               	retlw	0
   627  0685                     STR_2:
   628  0685  3430               	retlw	48	;'0'
   629  0686  3400               	retlw	0
   630  0687                     STR_3:
   631  0687  3431               	retlw	49	;'1'
   632  0688  3400               	retlw	0
   633  0689                     STR_4:
   634  0689  3432               	retlw	50	;'2'
   635  068A  3400               	retlw	0
   636  068B                     STR_5:
   637  068B  3433               	retlw	51	;'3'
   638  068C  3400               	retlw	0
   639  068D                     STR_6:
   640  068D  3434               	retlw	52	;'4'
   641  068E  3400               	retlw	0
   642  068F                     STR_7:
   643  068F  3435               	retlw	53	;'5'
   644  0690  3400               	retlw	0
   645  0691                     STR_8:
   646  0691  3436               	retlw	54	;'6'
   647  0692  3400               	retlw	0
   648  0693                     STR_9:
   649  0693  3437               	retlw	55	;'7'
   650  0694  3400               	retlw	0
   651  0695                     STR_10:
   652  0695  3438               	retlw	56	;'8'
   653  0696  3400               	retlw	0
   654  0697                     STR_11:
   655  0697  3439               	retlw	57	;'9'
   656  0698  3400               	retlw	0
   657  0699                     STR_23:
   658  0699  3440               	retlw	64	;'@'
   659  069A  3400               	retlw	0
   660  069B                     STR_12:
   661  069B  3441               	retlw	65	;'A'
   662  069C  3400               	retlw	0
   663  069D                     STR_13:
   664  069D  3442               	retlw	66	;'B'
   665  069E  3400               	retlw	0
   666  069F                     STR_14:
   667  069F  3443               	retlw	67	;'C'
   668  06A0  3400               	retlw	0
   669  06A1                     STR_15:
   670  06A1  3444               	retlw	68	;'D'
   671  06A2  3400               	retlw	0
   672  06A3                     STR_16:
   673  06A3  3445               	retlw	69	;'E'
   674  06A4  3400               	retlw	0
   675  06A5                     STR_17:
   676  06A5  3446               	retlw	70	;'F'
   677  06A6  3400               	retlw	0
   678                           
   679                           	psect	cinit
   680  0011                     start_initialization:	
   681                           ; #config settings
   682                           
   683  0011                     __initialization:
   684                           
   685                           ; Clear objects allocated to COMMON
   686  0011  01F0               	clrf	__pbssCOMMON& (0+127)
   687  0012  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   688  0013  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   689  0014  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   690  0015  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   691  0016  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   692                           
   693                           ; Clear objects allocated to BANK0
   694  0017  1383               	bcf	3,7	;select IRP bank0
   695  0018  303B               	movlw	low __pbssBANK0
   696  0019  0084               	movwf	4
   697  001A  3051               	movlw	low (__pbssBANK0+22)
   698  001B  120A  158A  279E  120A  118A  	fcall	clear_ram0
   699  0020                     end_of_initialization:	
   700                           ;End of C runtime variable initialization code
   701                           
   702  0020                     __end_of__initialization:
   703  0020  0183               	clrf	3
   704  0021  120A  118A  29FA   	ljmp	_main	;jump to C main() function
   705                           
   706                           	psect	bssCOMMON
   707  0070                     __pbssCOMMON:
   708  0070                     _POT1_Uas:
   709  0070                     	ds	1
   710  0071                     _cont_1AS:
   711  0071                     	ds	1
   712  0072                     _TEM_HAS:
   713  0072                     	ds	1
   714  0073                     _TEM_TAS:
   715  0073                     	ds	1
   716  0074                     _TEM_UAS:
   717  0074                     	ds	1
   718  0075                     _r:
   719  0075                     	ds	1
   720                           
   721                           	psect	bssBANK0
   722  003B                     __pbssBANK0:
   723  003B                     _POT1_Tas:
   724  003B                     	ds	1
   725  003C                     _POT1_Has:
   726  003C                     	ds	1
   727  003D                     _cont_3AS:
   728  003D                     	ds	1
   729  003E                     _cont_2AS:
   730  003E                     	ds	1
   731  003F                     _cont:
   732  003F                     	ds	1
   733  0040                     _cont_3:
   734  0040                     	ds	1
   735  0041                     _cont_2:
   736  0041                     	ds	1
   737  0042                     _cont_1:
   738  0042                     	ds	1
   739  0043                     _TEM_H:
   740  0043                     	ds	1
   741  0044                     _TEM_T:
   742  0044                     	ds	1
   743  0045                     _TEM_U:
   744  0045                     	ds	1
   745  0046                     _POT1_T:
   746  0046                     	ds	1
   747  0047                     _POT1_H:
   748  0047                     	ds	1
   749  0048                     _POT1_U:
   750  0048                     	ds	1
   751  0049                     _bro:
   752  0049                     	ds	1
   753  004A                     _sign:
   754  004A                     	ds	1
   755  004B                     _c:
   756  004B                     	ds	1
   757  004C                     _C:
   758  004C                     	ds	1
   759  004D                     _z:
   760  004D                     	ds	1
   761  004E                     _Z:
   762  004E                     	ds	1
   763  004F                     _R:
   764  004F                     	ds	1
   765  0050                     _L:
   766  0050                     	ds	1
   767                           
   768                           	psect	clrtext
   769  0F9E                     clear_ram0:	
   770                           ;	Called with FSR containing the base address, and
   771                           ;	W with the last address+1
   772                           
   773  0F9E  0064               	clrwdt	;clear the watchdog before getting into this loop
   774  0F9F                     clrloop0:
   775  0F9F  0180               	clrf	0	;clear RAM location pointed to by FSR
   776  0FA0  0A84               	incf	4,f	;increment pointer
   777  0FA1  0604               	xorwf	4,w	;XOR with final address
   778  0FA2  1903               	btfsc	3,2	;have we reached the end yet?
   779  0FA3  3400               	retlw	0	;all done for this memory range, return
   780  0FA4  0604               	xorwf	4,w	;XOR again to restore value
   781  0FA5  2F9F               	goto	clrloop0	;do the next byte
   782                           
   783                           	psect	cstackCOMMON
   784  0076                     __pcstackCOMMON:
   785  0076                     ?_send:
   786  0076                     ??_send:	
   787                           ; 1 bytes @ 0x0
   788                           
   789  0076                     ?_SET_TXR:	
   790                           ; 1 bytes @ 0x0
   791                           
   792  0076                     ?_SET_RXT:	
   793                           ; 1 bytes @ 0x0
   794                           
   795  0076                     ?_Setup:	
   796                           ; 1 bytes @ 0x0
   797                           
   798  0076                     ?_LCD_IN:	
   799                           ; 1 bytes @ 0x0
   800                           
   801  0076                     ?_LCD_CL:	
   802                           ; 1 bytes @ 0x0
   803                           
   804  0076                     ?_spiWrite:	
   805                           ; 1 bytes @ 0x0
   806                           
   807  0076                     ?_spiRead:	
   808                           ; 1 bytes @ 0x0
   809                           
   810  0076                     ?_CONVET_cont:	
   811                           ; 1 bytes @ 0x0
   812                           
   813  0076                     ?_CONV:	
   814                           ; 1 bytes @ 0x0
   815                           
   816  0076                     ?_CONT:	
   817                           ; 1 bytes @ 0x0
   818                           
   819  0076                     ?_CONV_AS:	
   820                           ; 1 bytes @ 0x0
   821                           
   822  0076                     ?_LCD_ON:	
   823                           ; 1 bytes @ 0x0
   824                           
   825  0076                     ?_LCD_TIM:	
   826                           ; 1 bytes @ 0x0
   827                           
   828  0076                     ?_isr:	
   829                           ; 1 bytes @ 0x0
   830                           
   831  0076                     ?_main:	
   832                           ; 1 bytes @ 0x0
   833                           
   834  0076                     ?_spiReceiveWait:	
   835                           ; 1 bytes @ 0x0
   836                           
   837  0076                     ?_LCD_PLAY:	
   838                           ; 1 bytes @ 0x0
   839                           
   840  0076                     ?_LCD_P:	
   841                           ; 1 bytes @ 0x0
   842                           
   843                           
   844                           ; 1 bytes @ 0x0
   845  0076                     	ds	2
   846  0078                     ??_isr:
   847                           
   848                           ; 1 bytes @ 0x2
   849  0078                     	ds	4
   850                           
   851                           	psect	cstackBANK0
   852  0020                     __pcstackBANK0:
   853  0020                     ??_SET_TXR:
   854  0020                     ??_SET_RXT:	
   855                           ; 1 bytes @ 0x0
   856                           
   857  0020                     ?_spiInit:	
   858                           ; 1 bytes @ 0x0
   859                           
   860  0020                     ??_Setup:	
   861                           ; 1 bytes @ 0x0
   862                           
   863  0020                     ??_spiWrite:	
   864                           ; 1 bytes @ 0x0
   865                           
   866  0020                     ??_spiRead:	
   867                           ; 1 bytes @ 0x0
   868                           
   869  0020                     ??_CONV_AS:	
   870                           ; 1 bytes @ 0x0
   871                           
   872  0020                     ??_LCD_ON:	
   873                           ; 1 bytes @ 0x0
   874                           
   875  0020                     ??_LCD_TIM:	
   876                           ; 1 bytes @ 0x0
   877                           
   878  0020                     ??_spiReceiveWait:	
   879                           ; 1 bytes @ 0x0
   880                           
   881  0020                     ??_LCD_PLAY:	
   882                           ; 1 bytes @ 0x0
   883                           
   884  0020                     ?___bmul:	
   885                           ; 1 bytes @ 0x0
   886                           
   887  0020                     ?___wmul:	
   888                           ; 1 bytes @ 0x0
   889                           
   890  0020                     spiInit@sDataSample:	
   891                           ; 2 bytes @ 0x0
   892                           
   893  0020                     spiWrite@dat:	
   894                           ; 1 bytes @ 0x0
   895                           
   896  0020                     ___bmul@multiplicand:	
   897                           ; 1 bytes @ 0x0
   898                           
   899  0020                     ___wmul@multiplier:	
   900                           ; 1 bytes @ 0x0
   901                           
   902                           
   903                           ; 2 bytes @ 0x0
   904  0020                     	ds	1
   905  0021                     ??___bmul:
   906  0021                     spiInit@sClockIdle:	
   907                           ; 1 bytes @ 0x1
   908                           
   909  0021                     LCD_PLAY@D:	
   910                           ; 1 bytes @ 0x1
   911                           
   912                           
   913                           ; 1 bytes @ 0x1
   914  0021                     	ds	1
   915  0022                     ??_LCD_P:
   916  0022                     spiInit@sTransmitEdge:	
   917                           ; 1 bytes @ 0x2
   918                           
   919  0022                     LCD_ON@C:	
   920                           ; 1 bytes @ 0x2
   921                           
   922  0022                     ___bmul@product:	
   923                           ; 1 bytes @ 0x2
   924                           
   925  0022                     ___wmul@multiplicand:	
   926                           ; 1 bytes @ 0x2
   927                           
   928                           
   929                           ; 2 bytes @ 0x2
   930  0022                     	ds	1
   931  0023                     ??_spiInit:
   932  0023                     ??_LCD_IN:	
   933                           ; 1 bytes @ 0x3
   934                           
   935  0023                     ??_LCD_CL:	
   936                           ; 1 bytes @ 0x3
   937                           
   938  0023                     spiInit@sType:	
   939                           ; 1 bytes @ 0x3
   940                           
   941  0023                     LCD_P@D:	
   942                           ; 1 bytes @ 0x3
   943                           
   944  0023                     ___bmul@multiplier:	
   945                           ; 1 bytes @ 0x3
   946                           
   947                           
   948                           ; 1 bytes @ 0x3
   949  0023                     	ds	1
   950  0024                     ?_LCD_POINT:
   951  0024                     ??___wmul:	
   952                           ; 1 bytes @ 0x4
   953                           
   954  0024                     LCD_POINT@x:	
   955                           ; 1 bytes @ 0x4
   956                           
   957  0024                     ___wmul@product:	
   958                           ; 2 bytes @ 0x4
   959                           
   960                           
   961                           ; 2 bytes @ 0x4
   962  0024                     	ds	2
   963  0026                     ?___awdiv:
   964  0026                     LCD_POINT@y:	
   965                           ; 2 bytes @ 0x6
   966                           
   967  0026                     ___awdiv@divisor:	
   968                           ; 2 bytes @ 0x6
   969                           
   970                           
   971                           ; 2 bytes @ 0x6
   972  0026                     	ds	2
   973  0028                     LCD_POINT@D:
   974  0028                     ___awdiv@dividend:	
   975                           ; 1 bytes @ 0x8
   976                           
   977                           
   978                           ; 2 bytes @ 0x8
   979  0028                     	ds	1
   980  0029                     ??_LCD_POINT:
   981                           
   982                           ; 1 bytes @ 0x9
   983  0029                     	ds	1
   984  002A                     ??___awdiv:
   985  002A                     LCD_POINT@LOC:	
   986                           ; 1 bytes @ 0xA
   987                           
   988                           
   989                           ; 1 bytes @ 0xA
   990  002A                     	ds	1
   991  002B                     ?_LCDVAL1:
   992  002B                     ___awdiv@counter:	
   993                           ; 1 bytes @ 0xB
   994                           
   995  002B                     LCDVAL1@x:	
   996                           ; 1 bytes @ 0xB
   997                           
   998                           
   999                           ; 2 bytes @ 0xB
  1000  002B                     	ds	1
  1001  002C                     ___awdiv@sign:
  1002                           
  1003                           ; 1 bytes @ 0xC
  1004  002C                     	ds	1
  1005  002D                     LCDVAL1@Z:
  1006  002D                     ___awdiv@quotient:	
  1007                           ; 2 bytes @ 0xD
  1008                           
  1009                           
  1010                           ; 2 bytes @ 0xD
  1011  002D                     	ds	2
  1012  002F                     ??_CONVET_cont:
  1013  002F                     ??_LCDVAL1:	
  1014                           ; 1 bytes @ 0xF
  1015                           
  1016  002F                     ??_CONV:	
  1017                           ; 1 bytes @ 0xF
  1018                           
  1019  002F                     ??_CONT:	
  1020                           ; 1 bytes @ 0xF
  1021                           
  1022                           
  1023                           ; 1 bytes @ 0xF
  1024  002F                     	ds	8
  1025  0037                     _CONV$1331:
  1026                           
  1027                           ; 2 bytes @ 0x17
  1028  0037                     	ds	2
  1029  0039                     ??_main:
  1030                           
  1031                           ; 1 bytes @ 0x19
  1032  0039                     	ds	2
  1033                           
  1034                           	psect	maintext
  1035  01FA                     __pmaintext:	
  1036 ;;
  1037 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1038 ;;
  1039 ;; *************** function _main *****************
  1040 ;; Defined at:
  1041 ;;		line 71 in file "master.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;		None
  1044 ;; Auto vars:     Size  Location     Type
  1045 ;;		None
  1046 ;; Return value:  Size  Location     Type
  1047 ;;                  1    wreg      void 
  1048 ;; Registers used:
  1049 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1050 ;; Tracked objects:
  1051 ;;		On entry : B00/0
  1052 ;;		On exit  : 0/0
  1053 ;;		Unchanged: 0/0
  1054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1055 ;;      Params:         0       0       0       0       0
  1056 ;;      Locals:         0       0       0       0       0
  1057 ;;      Temps:          0       2       0       0       0
  1058 ;;      Totals:         0       2       0       0       0
  1059 ;;Total ram usage:        2 bytes
  1060 ;; Hardware stack levels required when called:    7
  1061 ;; This function calls:
  1062 ;;		_CONT
  1063 ;;		_CONV
  1064 ;;		_CONVET_cont
  1065 ;;		_CONV_AS
  1066 ;;		_LCDVAL1
  1067 ;;		_LCD_CL
  1068 ;;		_LCD_IN
  1069 ;;		_LCD_POINT
  1070 ;;		_SET_RXT
  1071 ;;		_SET_TXR
  1072 ;;		_Setup
  1073 ;;		_spiInit
  1074 ;;		_spiRead
  1075 ;;		_spiWrite
  1076 ;; This function is called by:
  1077 ;;		Startup code after reset
  1078 ;; This function uses a non-reentrant model
  1079 ;;
  1080                           
  1081                           
  1082                           ;psect for function _main
  1083  01FA                     _main:
  1084  01FA                     l2126:	
  1085                           ;incstack = 0
  1086                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1087                           
  1088                           
  1089                           ;master.c: 72:     SET_TXR();
  1090  01FA  120A  158A  27C7  120A  118A  	fcall	_SET_TXR
  1091  01FF                     l2128:
  1092                           
  1093                           ;master.c: 73:     SET_RXT();
  1094  01FF  120A  158A  27AF  120A  118A  	fcall	_SET_RXT
  1095  0204                     l2130:
  1096                           
  1097                           ;master.c: 74:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_END, SPI_CLOCK_IDLE_LOW,
      +                           SPI_IDLE_2_ACTIVE);
  1098  0204  3080               	movlw	128
  1099  0205  1283               	bcf	3,5	;RP0=0, select bank0
  1100  0206  1303               	bcf	3,6	;RP1=0, select bank0
  1101  0207  00B9               	movwf	??_main
  1102  0208  0839               	movf	??_main,w
  1103  0209  00A0               	movwf	spiInit@sDataSample
  1104  020A  01A1               	clrf	spiInit@sClockIdle
  1105  020B  01A2               	clrf	spiInit@sTransmitEdge
  1106  020C  3020               	movlw	32
  1107  020D  120A  118A  27CC  120A  118A  	fcall	_spiInit
  1108  0212                     l2132:
  1109                           
  1110                           ;master.c: 75:     Setup();
  1111  0212  120A  118A  27AB  120A  118A  	fcall	_Setup
  1112  0217                     l2134:
  1113                           
  1114                           ;master.c: 76:     LCD_IN();
  1115  0217  120A  118A  2708  120A  118A  	fcall	_LCD_IN
  1116  021C                     l2136:
  1117                           
  1118                           ;master.c: 77:     LCD_CL();
  1119  021C  120A  158A  2790  120A  118A  	fcall	_LCD_CL
  1120  0221                     l2138:
  1121                           
  1122                           ;master.c: 78:     LCD_POINT(0,1,"ADC   TEMP   CONT");
  1123  0221  3000               	movlw	0
  1124  0222  1283               	bcf	3,5	;RP0=0, select bank0
  1125  0223  1303               	bcf	3,6	;RP1=0, select bank0
  1126  0224  00A4               	movwf	LCD_POINT@x
  1127  0225  00A5               	movwf	LCD_POINT@x+1
  1128  0226  3001               	movlw	1
  1129  0227  00A6               	movwf	LCD_POINT@y
  1130  0228  3000               	movlw	0
  1131  0229  00A7               	movwf	LCD_POINT@y+1
  1132  022A  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1133  022B  00B9               	movwf	??_main
  1134  022C  0839               	movf	??_main,w
  1135  022D  00A8               	movwf	LCD_POINT@D
  1136  022E  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  1137  0233                     l2140:
  1138                           
  1139                           ;master.c: 79:     Z=0;
  1140  0233  1283               	bcf	3,5	;RP0=0, select bank0
  1141  0234  1303               	bcf	3,6	;RP1=0, select bank0
  1142  0235  01CE               	clrf	_Z
  1143  0236                     l2142:
  1144                           
  1145                           ;master.c: 80:     z=0;
  1146  0236  01CD               	clrf	_z
  1147  0237  2B4E               	goto	l2184
  1148  0238                     l139:	
  1149                           ;master.c: 87:             case 0:
  1150                           
  1151                           
  1152                           ;master.c: 88:                 PORTEbits.RE0=0;
  1153  0238  1009               	bcf	9,0	;volatile
  1154                           
  1155                           ;master.c: 89:                 PORTEbits.RE1=1;
  1156  0239  1489               	bsf	9,1	;volatile
  1157                           
  1158                           ;master.c: 90:                 PORTEbits.RE2=1;
  1159  023A  1509               	bsf	9,2	;volatile
  1160  023B                     l2144:
  1161                           
  1162                           ;master.c: 91:                 spiWrite(0x00);
  1163  023B  3000               	movlw	0
  1164  023C  120A  158A  278A  120A  118A  	fcall	_spiWrite
  1165                           
  1166                           ;master.c: 92:                 cont=spiRead();
  1167  0241  120A  158A  27A6  120A  118A  	fcall	_spiRead
  1168  0246  1283               	bcf	3,5	;RP0=0, select bank0
  1169  0247  1303               	bcf	3,6	;RP1=0, select bank0
  1170  0248  00B9               	movwf	??_main
  1171  0249  0839               	movf	??_main,w
  1172  024A  00BF               	movwf	_cont
  1173  024B                     l2146:
  1174                           
  1175                           ;master.c: 93:                 PORTA=cont;
  1176  024B  083F               	movf	_cont,w
  1177  024C  0085               	movwf	5	;volatile
  1178  024D                     l2148:
  1179                           
  1180                           ;master.c: 94:                 CONVET_cont();
  1181  024D  120A  118A  2603  120A  118A  	fcall	_CONVET_cont
  1182  0252                     l2150:
  1183                           
  1184                           ;master.c: 95:                 LCDVAL1 (13,cont_1);
  1185  0252  300D               	movlw	13
  1186  0253  1283               	bcf	3,5	;RP0=0, select bank0
  1187  0254  1303               	bcf	3,6	;RP1=0, select bank0
  1188  0255  00AB               	movwf	LCDVAL1@x
  1189  0256  3000               	movlw	0
  1190  0257  00AC               	movwf	LCDVAL1@x+1
  1191  0258  0842               	movf	_cont_1,w
  1192  0259  00B9               	movwf	??_main
  1193  025A  01BA               	clrf	??_main+1
  1194  025B  0839               	movf	??_main,w
  1195  025C  00AD               	movwf	LCDVAL1@Z
  1196  025D  083A               	movf	??_main+1,w
  1197  025E  00AE               	movwf	LCDVAL1@Z+1
  1198  025F  120A  118A  2024  120A  118A  	fcall	_LCDVAL1
  1199  0264                     l2152:
  1200                           
  1201                           ;master.c: 96:                 LCDVAL1 (14,cont_2);
  1202  0264  300E               	movlw	14
  1203  0265  1283               	bcf	3,5	;RP0=0, select bank0
  1204  0266  1303               	bcf	3,6	;RP1=0, select bank0
  1205  0267  00AB               	movwf	LCDVAL1@x
  1206  0268  3000               	movlw	0
  1207  0269  00AC               	movwf	LCDVAL1@x+1
  1208  026A  0841               	movf	_cont_2,w
  1209  026B  00B9               	movwf	??_main
  1210  026C  01BA               	clrf	??_main+1
  1211  026D  0839               	movf	??_main,w
  1212  026E  00AD               	movwf	LCDVAL1@Z
  1213  026F  083A               	movf	??_main+1,w
  1214  0270  00AE               	movwf	LCDVAL1@Z+1
  1215  0271  120A  118A  2024  120A  118A  	fcall	_LCDVAL1
  1216  0276                     l2154:
  1217                           
  1218                           ;master.c: 97:                 LCDVAL1 (15,cont_3);
  1219  0276  300F               	movlw	15
  1220  0277  1283               	bcf	3,5	;RP0=0, select bank0
  1221  0278  1303               	bcf	3,6	;RP1=0, select bank0
  1222  0279  00AB               	movwf	LCDVAL1@x
  1223  027A  3000               	movlw	0
  1224  027B  00AC               	movwf	LCDVAL1@x+1
  1225  027C  0840               	movf	_cont_3,w
  1226  027D  00B9               	movwf	??_main
  1227  027E  01BA               	clrf	??_main+1
  1228  027F  0839               	movf	??_main,w
  1229  0280  00AD               	movwf	LCDVAL1@Z
  1230  0281  083A               	movf	??_main+1,w
  1231  0282  00AE               	movwf	LCDVAL1@Z+1
  1232  0283  120A  118A  2024  120A  118A  	fcall	_LCDVAL1
  1233  0288                     l2156:
  1234                           
  1235                           ;master.c: 98:                 Z++;
  1236  0288  3001               	movlw	1
  1237  0289  1283               	bcf	3,5	;RP0=0, select bank0
  1238  028A  1303               	bcf	3,6	;RP1=0, select bank0
  1239  028B  00B9               	movwf	??_main
  1240  028C  0839               	movf	??_main,w
  1241  028D  07CE               	addwf	_Z,f
  1242                           
  1243                           ;master.c: 99:                 break;
  1244  028E  2B63               	goto	l2186
  1245  028F                     l141:	
  1246                           ;master.c: 100:             case 1:
  1247                           
  1248                           
  1249                           ;master.c: 101:                 PORTEbits.RE0=1;
  1250  028F  1409               	bsf	9,0	;volatile
  1251                           
  1252                           ;master.c: 102:                 PORTEbits.RE1=0;
  1253  0290  1089               	bcf	9,1	;volatile
  1254                           
  1255                           ;master.c: 103:                 PORTEbits.RE2=1;
  1256  0291  1509               	bsf	9,2	;volatile
  1257  0292                     l2158:
  1258                           
  1259                           ;master.c: 104:                 spiWrite(0x00);
  1260  0292  3000               	movlw	0
  1261  0293  120A  158A  278A  120A  118A  	fcall	_spiWrite
  1262                           
  1263                           ;master.c: 105:                 L=spiRead();
  1264  0298  120A  158A  27A6  120A  118A  	fcall	_spiRead
  1265  029D  1283               	bcf	3,5	;RP0=0, select bank0
  1266  029E  1303               	bcf	3,6	;RP1=0, select bank0
  1267  029F  00B9               	movwf	??_main
  1268  02A0  0839               	movf	??_main,w
  1269  02A1  00D0               	movwf	_L
  1270                           
  1271                           ;master.c: 106:                 CONV();
  1272  02A2  120A  118A  248C  120A  118A  	fcall	_CONV
  1273  02A7                     l2160:
  1274                           
  1275                           ;master.c: 107:                 LCDVAL1 (0,POT1_U);
  1276  02A7  3000               	movlw	0
  1277  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  1278  02A9  1303               	bcf	3,6	;RP1=0, select bank0
  1279  02AA  00AB               	movwf	LCDVAL1@x
  1280  02AB  00AC               	movwf	LCDVAL1@x+1
  1281  02AC  0848               	movf	_POT1_U,w
  1282  02AD  00B9               	movwf	??_main
  1283  02AE  01BA               	clrf	??_main+1
  1284  02AF  0839               	movf	??_main,w
  1285  02B0  00AD               	movwf	LCDVAL1@Z
  1286  02B1  083A               	movf	??_main+1,w
  1287  02B2  00AE               	movwf	LCDVAL1@Z+1
  1288  02B3  120A  118A  2024  120A  118A  	fcall	_LCDVAL1
  1289  02B8                     l2162:
  1290                           
  1291                           ;master.c: 108:                 LCDVAL1 (1,16);
  1292  02B8  3001               	movlw	1
  1293  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  1294  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  1295  02BB  00AB               	movwf	LCDVAL1@x
  1296  02BC  3000               	movlw	0
  1297  02BD  00AC               	movwf	LCDVAL1@x+1
  1298  02BE  3010               	movlw	16
  1299  02BF  00AD               	movwf	LCDVAL1@Z
  1300  02C0  3000               	movlw	0
  1301  02C1  00AE               	movwf	LCDVAL1@Z+1
  1302  02C2  120A  118A  2024  120A  118A  	fcall	_LCDVAL1
  1303  02C7                     l2164:
  1304                           
  1305                           ;master.c: 109:                 LCDVAL1 (2,POT1_T);
  1306  02C7  3002               	movlw	2
  1307  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  1308  02C9  1303               	bcf	3,6	;RP1=0, select bank0
  1309  02CA  00AB               	movwf	LCDVAL1@x
  1310  02CB  3000               	movlw	0
  1311  02CC  00AC               	movwf	LCDVAL1@x+1
  1312  02CD  0846               	movf	_POT1_T,w
  1313  02CE  00B9               	movwf	??_main
  1314  02CF  01BA               	clrf	??_main+1
  1315  02D0  0839               	movf	??_main,w
  1316  02D1  00AD               	movwf	LCDVAL1@Z
  1317  02D2  083A               	movf	??_main+1,w
  1318  02D3  00AE               	movwf	LCDVAL1@Z+1
  1319  02D4  120A  118A  2024  120A  118A  	fcall	_LCDVAL1
  1320  02D9                     l2166:
  1321                           
  1322                           ;master.c: 110:                 LCDVAL1 (3,POT1_H);
  1323  02D9  3003               	movlw	3
  1324  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  1325  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  1326  02DC  00AB               	movwf	LCDVAL1@x
  1327  02DD  3000               	movlw	0
  1328  02DE  00AC               	movwf	LCDVAL1@x+1
  1329  02DF  0847               	movf	_POT1_H,w
  1330  02E0  00B9               	movwf	??_main
  1331  02E1  01BA               	clrf	??_main+1
  1332  02E2  0839               	movf	??_main,w
  1333  02E3  00AD               	movwf	LCDVAL1@Z
  1334  02E4  083A               	movf	??_main+1,w
  1335  02E5  00AE               	movwf	LCDVAL1@Z+1
  1336  02E6  120A  118A  2024  120A  118A  	fcall	_LCDVAL1
  1337  02EB  2A88               	goto	l2156
  1338  02EC                     l142:	
  1339                           ;master.c: 113:             case 2:
  1340                           
  1341                           
  1342                           ;master.c: 114:                 PORTEbits.RE0=1;
  1343  02EC  1409               	bsf	9,0	;volatile
  1344                           
  1345                           ;master.c: 115:                 PORTEbits.RE1=1;
  1346  02ED  1489               	bsf	9,1	;volatile
  1347                           
  1348                           ;master.c: 116:                 PORTEbits.RE2=0;
  1349  02EE  1109               	bcf	9,2	;volatile
  1350  02EF                     l2170:
  1351                           
  1352                           ;master.c: 118:                 spiWrite(0x00);
  1353  02EF  3000               	movlw	0
  1354  02F0  120A  158A  278A  120A  118A  	fcall	_spiWrite
  1355                           
  1356                           ;master.c: 120:                 C=spiRead();
  1357  02F5  120A  158A  27A6  120A  118A  	fcall	_spiRead
  1358  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  1359  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  1360  02FC  00B9               	movwf	??_main
  1361  02FD  0839               	movf	??_main,w
  1362  02FE  00CC               	movwf	_C
  1363  02FF                     l2172:
  1364                           
  1365                           ;master.c: 122:                 LCDVAL1 (6,bro);
  1366  02FF  3006               	movlw	6
  1367  0300  00AB               	movwf	LCDVAL1@x
  1368  0301  3000               	movlw	0
  1369  0302  00AC               	movwf	LCDVAL1@x+1
  1370  0303  0849               	movf	_bro,w
  1371  0304  00B9               	movwf	??_main
  1372  0305  01BA               	clrf	??_main+1
  1373  0306  0839               	movf	??_main,w
  1374  0307  00AD               	movwf	LCDVAL1@Z
  1375  0308  083A               	movf	??_main+1,w
  1376  0309  00AE               	movwf	LCDVAL1@Z+1
  1377  030A  120A  118A  2024  120A  118A  	fcall	_LCDVAL1
  1378  030F                     l2174:
  1379                           
  1380                           ;master.c: 123:                 LCDVAL1 (7,TEM_U);
  1381  030F  3007               	movlw	7
  1382  0310  1283               	bcf	3,5	;RP0=0, select bank0
  1383  0311  1303               	bcf	3,6	;RP1=0, select bank0
  1384  0312  00AB               	movwf	LCDVAL1@x
  1385  0313  3000               	movlw	0
  1386  0314  00AC               	movwf	LCDVAL1@x+1
  1387  0315  0845               	movf	_TEM_U,w
  1388  0316  00B9               	movwf	??_main
  1389  0317  01BA               	clrf	??_main+1
  1390  0318  0839               	movf	??_main,w
  1391  0319  00AD               	movwf	LCDVAL1@Z
  1392  031A  083A               	movf	??_main+1,w
  1393  031B  00AE               	movwf	LCDVAL1@Z+1
  1394  031C  120A  118A  2024  120A  118A  	fcall	_LCDVAL1
  1395  0321                     l2176:
  1396                           
  1397                           ;master.c: 124:                 LCDVAL1 (8,TEM_T);
  1398  0321  3008               	movlw	8
  1399  0322  1283               	bcf	3,5	;RP0=0, select bank0
  1400  0323  1303               	bcf	3,6	;RP1=0, select bank0
  1401  0324  00AB               	movwf	LCDVAL1@x
  1402  0325  3000               	movlw	0
  1403  0326  00AC               	movwf	LCDVAL1@x+1
  1404  0327  0844               	movf	_TEM_T,w
  1405  0328  00B9               	movwf	??_main
  1406  0329  01BA               	clrf	??_main+1
  1407  032A  0839               	movf	??_main,w
  1408  032B  00AD               	movwf	LCDVAL1@Z
  1409  032C  083A               	movf	??_main+1,w
  1410  032D  00AE               	movwf	LCDVAL1@Z+1
  1411  032E  120A  118A  2024  120A  118A  	fcall	_LCDVAL1
  1412  0333                     l2178:
  1413                           
  1414                           ;master.c: 125:                 LCDVAL1 (9,TEM_H);
  1415  0333  3009               	movlw	9
  1416  0334  1283               	bcf	3,5	;RP0=0, select bank0
  1417  0335  1303               	bcf	3,6	;RP1=0, select bank0
  1418  0336  00AB               	movwf	LCDVAL1@x
  1419  0337  3000               	movlw	0
  1420  0338  00AC               	movwf	LCDVAL1@x+1
  1421  0339  0843               	movf	_TEM_H,w
  1422  033A  00B9               	movwf	??_main
  1423  033B  01BA               	clrf	??_main+1
  1424  033C  0839               	movf	??_main,w
  1425  033D  00AD               	movwf	LCDVAL1@Z
  1426  033E  083A               	movf	??_main+1,w
  1427  033F  00AE               	movwf	LCDVAL1@Z+1
  1428  0340  120A  118A  2024  120A  118A  	fcall	_LCDVAL1
  1429                           
  1430                           ;master.c: 128:                 CONT();
  1431  0345  120A  118A  236C  120A  118A  	fcall	_CONT
  1432  034A                     l2180:
  1433                           
  1434                           ;master.c: 130:                 Z=0;
  1435  034A  1283               	bcf	3,5	;RP0=0, select bank0
  1436  034B  1303               	bcf	3,6	;RP1=0, select bank0
  1437  034C  01CE               	clrf	_Z
  1438                           
  1439                           ;master.c: 131:                 break;
  1440  034D  2B63               	goto	l2186
  1441  034E                     l2184:
  1442  034E  1283               	bcf	3,5	;RP0=0, select bank0
  1443  034F  1303               	bcf	3,6	;RP1=0, select bank0
  1444  0350  084E               	movf	_Z,w
  1445  0351  00B9               	movwf	??_main
  1446  0352  01BA               	clrf	??_main+1
  1447                           
  1448                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1449                           ; Switch size 1, requested type "simple"
  1450                           ; Number of cases is 1, Range of values is 0 to 0
  1451                           ; switch strategies available:
  1452                           ; Name         Instructions Cycles
  1453                           ; simple_byte            4     3 (average)
  1454                           ; direct_byte           11     8 (fixed)
  1455                           ; jumptable            260     6 (fixed)
  1456                           ;	Chosen strategy is simple_byte
  1457  0353  083A               	movf	??_main+1,w
  1458  0354  3A00               	xorlw	0	; case 0
  1459  0355  1903               	skipnz
  1460  0356  2B58               	goto	l2272
  1461  0357  2B63               	goto	l2186
  1462  0358                     l2272:
  1463                           
  1464                           ; Switch size 1, requested type "simple"
  1465                           ; Number of cases is 3, Range of values is 0 to 2
  1466                           ; switch strategies available:
  1467                           ; Name         Instructions Cycles
  1468                           ; simple_byte           10     6 (average)
  1469                           ; direct_byte           17     8 (fixed)
  1470                           ; jumptable            260     6 (fixed)
  1471                           ;	Chosen strategy is simple_byte
  1472  0358  0839               	movf	??_main,w
  1473  0359  3A00               	xorlw	0	; case 0
  1474  035A  1903               	skipnz
  1475  035B  2A38               	goto	l139
  1476  035C  3A01               	xorlw	1	; case 1
  1477  035D  1903               	skipnz
  1478  035E  2A8F               	goto	l141
  1479  035F  3A03               	xorlw	3	; case 2
  1480  0360  1903               	skipnz
  1481  0361  2AEC               	goto	l142
  1482  0362  2B63               	goto	l2186
  1483  0363                     l2186:
  1484                           
  1485                           ;master.c: 133:         CONV_AS();
  1486  0363  120A  118A  26D8  120A  118A  	fcall	_CONV_AS
  1487  0368  2B4E               	goto	l2184
  1488  0369  120A  118A  280E   	ljmp	start
  1489  036C                     __end_of_main:
  1490                           
  1491                           	psect	text1
  1492  0F8A                     __ptext1:	
  1493 ;; *************** function _spiWrite *****************
  1494 ;; Defined at:
  1495 ;;		line 28 in file "MSSP.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;  dat             1    wreg     unsigned char 
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;  dat             1    0[BANK0 ] unsigned char 
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  1    wreg      void 
  1502 ;; Registers used:
  1503 ;;		wreg
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1509 ;;      Params:         0       0       0       0       0
  1510 ;;      Locals:         0       1       0       0       0
  1511 ;;      Temps:          0       0       0       0       0
  1512 ;;      Totals:         0       1       0       0       0
  1513 ;;Total ram usage:        1 bytes
  1514 ;; Hardware stack levels used:    1
  1515 ;; Hardware stack levels required when called:    2
  1516 ;; This function calls:
  1517 ;;		Nothing
  1518 ;; This function is called by:
  1519 ;;		_main
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           
  1524                           ;psect for function _spiWrite
  1525  0F8A                     _spiWrite:
  1526                           
  1527                           ;incstack = 0
  1528                           ; Regs used in _spiWrite: [wreg]
  1529                           ;spiWrite@dat stored from wreg
  1530  0F8A  1283               	bcf	3,5	;RP0=0, select bank0
  1531  0F8B  1303               	bcf	3,6	;RP1=0, select bank0
  1532  0F8C  00A0               	movwf	spiWrite@dat
  1533  0F8D                     l2044:
  1534                           
  1535                           ;MSSP.c: 28: void spiWrite(char dat);MSSP.c: 29: {;MSSP.c: 30:     SSPBUF = dat;
  1536  0F8D  0820               	movf	spiWrite@dat,w
  1537  0F8E  0093               	movwf	19	;volatile
  1538  0F8F                     l208:
  1539  0F8F  0008               	return
  1540  0F90                     __end_of_spiWrite:
  1541                           
  1542                           	psect	text2
  1543  0FA6                     __ptext2:	
  1544 ;; *************** function _spiRead *****************
  1545 ;; Defined at:
  1546 ;;		line 41 in file "MSSP.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;		None
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;		None
  1551 ;; Return value:  Size  Location     Type
  1552 ;;                  1    wreg      unsigned char 
  1553 ;; Registers used:
  1554 ;;		wreg, status,2, status,0, pclath, cstack
  1555 ;; Tracked objects:
  1556 ;;		On entry : 0/0
  1557 ;;		On exit  : 0/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1560 ;;      Params:         0       0       0       0       0
  1561 ;;      Locals:         0       0       0       0       0
  1562 ;;      Temps:          0       0       0       0       0
  1563 ;;      Totals:         0       0       0       0       0
  1564 ;;Total ram usage:        0 bytes
  1565 ;; Hardware stack levels used:    1
  1566 ;; Hardware stack levels required when called:    3
  1567 ;; This function calls:
  1568 ;;		_spiReceiveWait
  1569 ;; This function is called by:
  1570 ;;		_main
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573                           
  1574                           
  1575                           ;psect for function _spiRead
  1576  0FA6                     _spiRead:
  1577  0FA6                     l2046:	
  1578                           ;incstack = 0
  1579                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1580                           
  1581                           
  1582                           ;MSSP.c: 43:     spiReceiveWait();
  1583  0FA6  120A  158A  2797  120A  158A  	fcall	_spiReceiveWait
  1584  0FAB                     l2048:
  1585                           
  1586                           ;MSSP.c: 44:     return(SSPBUF);
  1587  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  1588  0FAC  1303               	bcf	3,6	;RP1=0, select bank0
  1589  0FAD  0813               	movf	19,w	;volatile
  1590  0FAE                     l216:
  1591  0FAE  0008               	return
  1592  0FAF                     __end_of_spiRead:
  1593                           
  1594                           	psect	text3
  1595  0F97                     __ptext3:	
  1596 ;; *************** function _spiReceiveWait *****************
  1597 ;; Defined at:
  1598 ;;		line 23 in file "MSSP.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;		None
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;		None
  1603 ;; Return value:  Size  Location     Type
  1604 ;;                  1    wreg      void 
  1605 ;; Registers used:
  1606 ;;		None
  1607 ;; Tracked objects:
  1608 ;;		On entry : 0/0
  1609 ;;		On exit  : 0/0
  1610 ;;		Unchanged: 0/0
  1611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1612 ;;      Params:         0       0       0       0       0
  1613 ;;      Locals:         0       0       0       0       0
  1614 ;;      Temps:          0       0       0       0       0
  1615 ;;      Totals:         0       0       0       0       0
  1616 ;;Total ram usage:        0 bytes
  1617 ;; Hardware stack levels used:    1
  1618 ;; Hardware stack levels required when called:    2
  1619 ;; This function calls:
  1620 ;;		Nothing
  1621 ;; This function is called by:
  1622 ;;		_spiRead
  1623 ;; This function uses a non-reentrant model
  1624 ;;
  1625                           
  1626                           
  1627                           ;psect for function _spiReceiveWait
  1628  0F97                     _spiReceiveWait:
  1629  0F97                     l1942:	
  1630                           ;incstack = 0
  1631                           ; Regs used in _spiReceiveWait: []
  1632                           
  1633  0F97                     l202:	
  1634                           ;MSSP.c: 25:     while ( !SSPSTATbits.BF );
  1635                           
  1636  0F97  1683               	bsf	3,5	;RP0=1, select bank1
  1637  0F98  1303               	bcf	3,6	;RP1=0, select bank1
  1638  0F99  1C14               	btfss	20,0	;volatile
  1639  0F9A  2F9C               	goto	u481
  1640  0F9B  2F9D               	goto	u480
  1641  0F9C                     u481:
  1642  0F9C  2F97               	goto	l202
  1643  0F9D                     u480:
  1644  0F9D                     l205:
  1645  0F9D  0008               	return
  1646  0F9E                     __end_of_spiReceiveWait:
  1647                           
  1648                           	psect	text4
  1649  07CC                     __ptext4:	
  1650 ;; *************** function _spiInit *****************
  1651 ;; Defined at:
  1652 ;;		line 6 in file "MSSP.c"
  1653 ;; Parameters:    Size  Location     Type
  1654 ;;  sType           1    wreg     enum E1264
  1655 ;;  sDataSample     1    0[BANK0 ] enum E1272
  1656 ;;  sClockIdle      1    1[BANK0 ] enum E1276
  1657 ;;  sTransmitEdg    1    2[BANK0 ] enum E1280
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;  sType           1    3[BANK0 ] enum E1264
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  1    wreg      void 
  1662 ;; Registers used:
  1663 ;;		wreg, status,2, status,0
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1669 ;;      Params:         0       3       0       0       0
  1670 ;;      Locals:         0       1       0       0       0
  1671 ;;      Temps:          0       0       0       0       0
  1672 ;;      Totals:         0       4       0       0       0
  1673 ;;Total ram usage:        4 bytes
  1674 ;; Hardware stack levels used:    1
  1675 ;; Hardware stack levels required when called:    2
  1676 ;; This function calls:
  1677 ;;		Nothing
  1678 ;; This function is called by:
  1679 ;;		_main
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           
  1684                           ;psect for function _spiInit
  1685  07CC                     _spiInit:
  1686                           
  1687                           ;incstack = 0
  1688                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1689                           ;spiInit@sType stored from wreg
  1690  07CC  1283               	bcf	3,5	;RP0=0, select bank0
  1691  07CD  1303               	bcf	3,6	;RP1=0, select bank0
  1692  07CE  00A3               	movwf	spiInit@sType
  1693  07CF                     l1980:
  1694                           
  1695                           ;MSSP.c: 6: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);MSSP.c: 7: {;MSSP.c: 8:     TRISC5 = 0;
  1696  07CF  1683               	bsf	3,5	;RP0=1, select bank1
  1697  07D0  1303               	bcf	3,6	;RP1=0, select bank1
  1698  07D1  1287               	bcf	7,5	;volatile
  1699                           
  1700                           ;MSSP.c: 9:     if(sType & 0b00000100)
  1701  07D2  1283               	bcf	3,5	;RP0=0, select bank0
  1702  07D3  1303               	bcf	3,6	;RP1=0, select bank0
  1703  07D4  1D23               	btfss	spiInit@sType,2
  1704  07D5  2FD7               	goto	u551
  1705  07D6  2FD8               	goto	u550
  1706  07D7                     u551:
  1707  07D7  2FDE               	goto	l1986
  1708  07D8                     u550:
  1709  07D8                     l1982:
  1710                           
  1711                           ;MSSP.c: 10:     {;MSSP.c: 11:         SSPSTAT = sTransmitEdge;
  1712  07D8  0822               	movf	spiInit@sTransmitEdge,w
  1713  07D9  1683               	bsf	3,5	;RP0=1, select bank1
  1714  07DA  1303               	bcf	3,6	;RP1=0, select bank1
  1715  07DB  0094               	movwf	20	;volatile
  1716  07DC                     l1984:
  1717                           
  1718                           ;MSSP.c: 12:         TRISC3 = 1;
  1719  07DC  1587               	bsf	7,3	;volatile
  1720                           
  1721                           ;MSSP.c: 13:     }
  1722  07DD  2FE4               	goto	l198
  1723  07DE                     l1986:
  1724                           
  1725                           ;MSSP.c: 15:     {;MSSP.c: 16:         SSPSTAT = sDataSample | sTransmitEdge;
  1726  07DE  0820               	movf	spiInit@sDataSample,w
  1727  07DF  0422               	iorwf	spiInit@sTransmitEdge,w
  1728  07E0  1683               	bsf	3,5	;RP0=1, select bank1
  1729  07E1  1303               	bcf	3,6	;RP1=0, select bank1
  1730  07E2  0094               	movwf	20	;volatile
  1731  07E3                     l1988:
  1732                           
  1733                           ;MSSP.c: 17:         TRISC3 = 0;
  1734  07E3  1187               	bcf	7,3	;volatile
  1735  07E4                     l198:	
  1736                           ;MSSP.c: 18:     }
  1737                           
  1738                           
  1739                           ;MSSP.c: 20:     SSPCON = sType | sClockIdle;
  1740  07E4  1283               	bcf	3,5	;RP0=0, select bank0
  1741  07E5  1303               	bcf	3,6	;RP1=0, select bank0
  1742  07E6  0823               	movf	spiInit@sType,w
  1743  07E7  0421               	iorwf	spiInit@sClockIdle,w
  1744  07E8  0094               	movwf	20	;volatile
  1745  07E9                     l199:
  1746  07E9  0008               	return
  1747  07EA                     __end_of_spiInit:
  1748                           
  1749                           	psect	text5
  1750  07AB                     __ptext5:	
  1751 ;; *************** function _Setup *****************
  1752 ;; Defined at:
  1753 ;;		line 139 in file "master.c"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;		None
  1756 ;; Auto vars:     Size  Location     Type
  1757 ;;		None
  1758 ;; Return value:  Size  Location     Type
  1759 ;;                  1    wreg      void 
  1760 ;; Registers used:
  1761 ;;		wreg, status,2
  1762 ;; Tracked objects:
  1763 ;;		On entry : 0/0
  1764 ;;		On exit  : 0/0
  1765 ;;		Unchanged: 0/0
  1766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1767 ;;      Params:         0       0       0       0       0
  1768 ;;      Locals:         0       0       0       0       0
  1769 ;;      Temps:          0       0       0       0       0
  1770 ;;      Totals:         0       0       0       0       0
  1771 ;;Total ram usage:        0 bytes
  1772 ;; Hardware stack levels used:    1
  1773 ;; Hardware stack levels required when called:    2
  1774 ;; This function calls:
  1775 ;;		Nothing
  1776 ;; This function is called by:
  1777 ;;		_main
  1778 ;; This function uses a non-reentrant model
  1779 ;;
  1780                           
  1781                           
  1782                           ;psect for function _Setup
  1783  07AB                     _Setup:
  1784  07AB                     l1990:	
  1785                           ;incstack = 0
  1786                           ; Regs used in _Setup: [wreg+status,2]
  1787                           
  1788                           
  1789                           ;master.c: 141:     PORTA = 0;
  1790  07AB  1283               	bcf	3,5	;RP0=0, select bank0
  1791  07AC  1303               	bcf	3,6	;RP1=0, select bank0
  1792  07AD  0185               	clrf	5	;volatile
  1793                           
  1794                           ;master.c: 142:     PORTB = 0;
  1795  07AE  0186               	clrf	6	;volatile
  1796                           
  1797                           ;master.c: 143:     PORTC = 0;
  1798  07AF  0187               	clrf	7	;volatile
  1799                           
  1800                           ;master.c: 144:     PORTD = 0;
  1801  07B0  0188               	clrf	8	;volatile
  1802                           
  1803                           ;master.c: 145:     PORTE = 0;
  1804  07B1  0189               	clrf	9	;volatile
  1805                           
  1806                           ;master.c: 147:     TRISA = 0B00000000;
  1807  07B2  1683               	bsf	3,5	;RP0=1, select bank1
  1808  07B3  1303               	bcf	3,6	;RP1=0, select bank1
  1809  07B4  0185               	clrf	5	;volatile
  1810                           
  1811                           ;master.c: 148:     TRISB = 0B00000000;
  1812  07B5  0186               	clrf	6	;volatile
  1813  07B6                     l1992:
  1814                           
  1815                           ;master.c: 149:     TRISC = 0B00010000;
  1816  07B6  3010               	movlw	16
  1817  07B7  0087               	movwf	7	;volatile
  1818  07B8                     l1994:
  1819                           
  1820                           ;master.c: 150:     TRISD = 0B00000000;
  1821  07B8  0188               	clrf	8	;volatile
  1822  07B9                     l1996:
  1823                           
  1824                           ;master.c: 151:     TRISE = 0B0000;
  1825  07B9  0189               	clrf	9	;volatile
  1826  07BA                     l1998:
  1827                           
  1828                           ;master.c: 153:     ANSEL = 0B00000000;
  1829  07BA  1683               	bsf	3,5	;RP0=1, select bank3
  1830  07BB  1703               	bsf	3,6	;RP1=1, select bank3
  1831  07BC  0188               	clrf	8	;volatile
  1832  07BD                     l2000:
  1833                           
  1834                           ;master.c: 154:     ANSELH = 0B00000000;
  1835  07BD  0189               	clrf	9	;volatile
  1836  07BE                     l2002:
  1837                           
  1838                           ;master.c: 157:     INTCONbits.GIE=1;
  1839  07BE  178B               	bsf	11,7	;volatile
  1840  07BF                     l2004:
  1841                           
  1842                           ;master.c: 158:     INTCONbits.PEIE=1;
  1843  07BF  170B               	bsf	11,6	;volatile
  1844  07C0                     l2006:
  1845                           
  1846                           ;master.c: 159:     INTCONbits.TMR0IE=1;
  1847  07C0  168B               	bsf	11,5	;volatile
  1848  07C1                     l2008:
  1849                           
  1850                           ;master.c: 160:     INTCONbits.TMR0IF=0;
  1851  07C1  110B               	bcf	11,2	;volatile
  1852  07C2                     l2010:
  1853                           
  1854                           ;master.c: 161:     PIE1bits.TXIE = 1;
  1855  07C2  1683               	bsf	3,5	;RP0=1, select bank1
  1856  07C3  1303               	bcf	3,6	;RP1=0, select bank1
  1857  07C4  160C               	bsf	12,4	;volatile
  1858  07C5                     l2012:
  1859                           
  1860                           ;master.c: 162:     OPTION_REGbits.T0CS=0;
  1861  07C5  1281               	bcf	1,5	;volatile
  1862  07C6                     l2014:
  1863                           
  1864                           ;master.c: 163:     OPTION_REGbits.T0SE=0;
  1865  07C6  1201               	bcf	1,4	;volatile
  1866  07C7                     l2016:
  1867                           
  1868                           ;master.c: 164:     OPTION_REGbits.PSA=0;
  1869  07C7  1181               	bcf	1,3	;volatile
  1870  07C8                     l2018:
  1871                           
  1872                           ;master.c: 166:     OPTION_REGbits.PS0=1;
  1873  07C8  1401               	bsf	1,0	;volatile
  1874  07C9                     l2020:
  1875                           
  1876                           ;master.c: 167:     OPTION_REGbits.PS1=1;
  1877  07C9  1481               	bsf	1,1	;volatile
  1878  07CA                     l2022:
  1879                           
  1880                           ;master.c: 168:     OPTION_REGbits.PS2=1;
  1881  07CA  1501               	bsf	1,2	;volatile
  1882  07CB                     l148:
  1883  07CB  0008               	return
  1884  07CC                     __end_of_Setup:
  1885                           
  1886                           	psect	text6
  1887  0FC7                     __ptext6:	
  1888 ;; *************** function _SET_TXR *****************
  1889 ;; Defined at:
  1890 ;;		line 3 in file "EUSART.c"
  1891 ;; Parameters:    Size  Location     Type
  1892 ;;		None
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;		None
  1895 ;; Return value:  Size  Location     Type
  1896 ;;                  1    wreg      void 
  1897 ;; Registers used:
  1898 ;;		wreg, status,2
  1899 ;; Tracked objects:
  1900 ;;		On entry : 0/0
  1901 ;;		On exit  : 0/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1904 ;;      Params:         0       0       0       0       0
  1905 ;;      Locals:         0       0       0       0       0
  1906 ;;      Temps:          0       0       0       0       0
  1907 ;;      Totals:         0       0       0       0       0
  1908 ;;Total ram usage:        0 bytes
  1909 ;; Hardware stack levels used:    1
  1910 ;; Hardware stack levels required when called:    2
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		_main
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           
  1919                           ;psect for function _SET_TXR
  1920  0FC7                     _SET_TXR:
  1921  0FC7                     l1972:	
  1922                           ;incstack = 0
  1923                           ; Regs used in _SET_TXR: [wreg+status,2]
  1924                           
  1925                           
  1926                           ;EUSART.c: 4:     TXSTAbits.SYNC=0;
  1927  0FC7  1683               	bsf	3,5	;RP0=1, select bank1
  1928  0FC8  1303               	bcf	3,6	;RP1=0, select bank1
  1929  0FC9  1218               	bcf	24,4	;volatile
  1930                           
  1931                           ;EUSART.c: 5:     TXSTAbits.TXEN=1;
  1932  0FCA  1698               	bsf	24,5	;volatile
  1933                           
  1934                           ;EUSART.c: 6:     TXSTAbits.BRGH=1;
  1935  0FCB  1518               	bsf	24,2	;volatile
  1936                           
  1937                           ;EUSART.c: 7:     TXSTAbits.TX9=0;
  1938  0FCC  1318               	bcf	24,6	;volatile
  1939                           
  1940                           ;EUSART.c: 8:     BAUDCTLbits.BRG16=0;
  1941  0FCD  1683               	bsf	3,5	;RP0=1, select bank3
  1942  0FCE  1703               	bsf	3,6	;RP1=1, select bank3
  1943  0FCF  1187               	bcf	7,3	;volatile
  1944  0FD0                     l1974:
  1945                           
  1946                           ;EUSART.c: 9:     SPBRG=25;
  1947  0FD0  3019               	movlw	25
  1948  0FD1  1683               	bsf	3,5	;RP0=1, select bank1
  1949  0FD2  1303               	bcf	3,6	;RP1=0, select bank1
  1950  0FD3  0099               	movwf	25	;volatile
  1951  0FD4                     l1976:
  1952                           
  1953                           ;EUSART.c: 10:     SPBRGH=0;
  1954  0FD4  019A               	clrf	26	;volatile
  1955  0FD5                     l301:
  1956  0FD5  0008               	return
  1957  0FD6                     __end_of_SET_TXR:
  1958                           
  1959                           	psect	text7
  1960  0FAF                     __ptext7:	
  1961 ;; *************** function _SET_RXT *****************
  1962 ;; Defined at:
  1963 ;;		line 12 in file "EUSART.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;		None
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;		None
  1968 ;; Return value:  Size  Location     Type
  1969 ;;                  1    wreg      void 
  1970 ;; Registers used:
  1971 ;;		None
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/0
  1974 ;;		On exit  : 0/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1977 ;;      Params:         0       0       0       0       0
  1978 ;;      Locals:         0       0       0       0       0
  1979 ;;      Temps:          0       0       0       0       0
  1980 ;;      Totals:         0       0       0       0       0
  1981 ;;Total ram usage:        0 bytes
  1982 ;; Hardware stack levels used:    1
  1983 ;; Hardware stack levels required when called:    2
  1984 ;; This function calls:
  1985 ;;		Nothing
  1986 ;; This function is called by:
  1987 ;;		_main
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           
  1992                           ;psect for function _SET_RXT
  1993  0FAF                     _SET_RXT:
  1994  0FAF                     l1978:	
  1995                           ;incstack = 0
  1996                           ; Regs used in _SET_RXT: []
  1997                           
  1998                           
  1999                           ;EUSART.c: 13:     RCSTAbits.SPEN=1;
  2000  0FAF  1283               	bcf	3,5	;RP0=0, select bank0
  2001  0FB0  1303               	bcf	3,6	;RP1=0, select bank0
  2002  0FB1  1798               	bsf	24,7	;volatile
  2003                           
  2004                           ;EUSART.c: 14:     RCSTAbits.CREN=1;
  2005  0FB2  1618               	bsf	24,4	;volatile
  2006                           
  2007                           ;EUSART.c: 15:     RCSTAbits.FERR=0;
  2008  0FB3  1118               	bcf	24,2	;volatile
  2009                           
  2010                           ;EUSART.c: 16:     RCSTAbits.OERR=0;
  2011  0FB4  1098               	bcf	24,1	;volatile
  2012                           
  2013                           ;EUSART.c: 17:     RCSTAbits.RX9=0;
  2014  0FB5  1318               	bcf	24,6	;volatile
  2015                           
  2016                           ;EUSART.c: 18:     PIE1bits.RCIE=1;
  2017  0FB6  1683               	bsf	3,5	;RP0=1, select bank1
  2018  0FB7  1303               	bcf	3,6	;RP1=0, select bank1
  2019  0FB8  168C               	bsf	12,5	;volatile
  2020  0FB9                     l304:
  2021  0FB9  0008               	return
  2022  0FBA                     __end_of_SET_RXT:
  2023                           
  2024                           	psect	text8
  2025  0708                     __ptext8:	
  2026 ;; *************** function _LCD_IN *****************
  2027 ;; Defined at:
  2028 ;;		line 4 in file "SETLCD.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;		None
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;		None
  2033 ;; Return value:  Size  Location     Type
  2034 ;;                  1    wreg      void 
  2035 ;; Registers used:
  2036 ;;		wreg, status,2, status,0, pclath, cstack
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2042 ;;      Params:         0       0       0       0       0
  2043 ;;      Locals:         0       0       0       0       0
  2044 ;;      Temps:          0       2       0       0       0
  2045 ;;      Totals:         0       2       0       0       0
  2046 ;;Total ram usage:        2 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; Hardware stack levels required when called:    4
  2049 ;; This function calls:
  2050 ;;		_LCD_ON
  2051 ;; This function is called by:
  2052 ;;		_main
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           
  2057                           ;psect for function _LCD_IN
  2058  0708                     _LCD_IN:
  2059  0708                     l2024:	
  2060                           ;incstack = 0
  2061                           ; Regs used in _LCD_IN: [wreg+status,2+status,0+pclath+cstack]
  2062                           
  2063                           
  2064                           ;SETLCD.c: 5:     TRISDbits.TRISD6 = 0;
  2065  0708  1683               	bsf	3,5	;RP0=1, select bank1
  2066  0709  1303               	bcf	3,6	;RP1=0, select bank1
  2067  070A  1308               	bcf	8,6	;volatile
  2068                           
  2069                           ;SETLCD.c: 6:     TRISDbits.TRISD7 = 0;
  2070  070B  1388               	bcf	8,7	;volatile
  2071  070C                     l2026:
  2072                           
  2073                           ;SETLCD.c: 7:     TRISB = 0;
  2074  070C  0186               	clrf	6	;volatile
  2075  070D                     l2028:
  2076                           
  2077                           ;SETLCD.c: 8:     PORTDbits.RD6 = 0;
  2078  070D  1283               	bcf	3,5	;RP0=0, select bank0
  2079  070E  1303               	bcf	3,6	;RP1=0, select bank0
  2080  070F  1308               	bcf	8,6	;volatile
  2081  0710                     l2030:
  2082                           
  2083                           ;SETLCD.c: 9:     PORTDbits.RD7 = 0;
  2084  0710  1388               	bcf	8,7	;volatile
  2085                           
  2086                           ;SETLCD.c: 10:     PORTB = 0;
  2087  0711  0186               	clrf	6	;volatile
  2088  0712                     l2032:
  2089                           
  2090                           ;SETLCD.c: 11:     _delay((unsigned long)((50)*(4000000/4000.0)));
  2091  0712  3041               	movlw	65
  2092  0713  1283               	bcf	3,5	;RP0=0, select bank0
  2093  0714  1303               	bcf	3,6	;RP1=0, select bank0
  2094  0715  00A4               	movwf	??_LCD_IN+1
  2095  0716  30ED               	movlw	237
  2096  0717  00A3               	movwf	??_LCD_IN
  2097  0718                     u577:
  2098  0718  0BA3               	decfsz	??_LCD_IN,f
  2099  0719  2F18               	goto	u577
  2100  071A  0BA4               	decfsz	??_LCD_IN+1,f
  2101  071B  2F18               	goto	u577
  2102  071C  2F1D               	nop2
  2103  071D                     l2034:
  2104                           
  2105                           ;SETLCD.c: 12:     LCD_ON(0x02);
  2106  071D  3002               	movlw	2
  2107  071E  120A  118A  27EA  120A  118A  	fcall	_LCD_ON
  2108  0723                     l2036:
  2109                           
  2110                           ;SETLCD.c: 13:     LCD_ON(0x38);
  2111  0723  3038               	movlw	56
  2112  0724  120A  118A  27EA  120A  118A  	fcall	_LCD_ON
  2113  0729                     l2038:
  2114                           
  2115                           ;SETLCD.c: 14:     LCD_ON(0x0C);
  2116  0729  300C               	movlw	12
  2117  072A  120A  118A  27EA  120A  118A  	fcall	_LCD_ON
  2118  072F                     l2040:
  2119                           
  2120                           ;SETLCD.c: 15:     LCD_ON(0x06);
  2121  072F  3006               	movlw	6
  2122  0730  120A  118A  27EA  120A  118A  	fcall	_LCD_ON
  2123  0735                     l233:
  2124  0735  0008               	return
  2125  0736                     __end_of_LCD_IN:
  2126                           
  2127                           	psect	text9
  2128  0F90                     __ptext9:	
  2129 ;; *************** function _LCD_CL *****************
  2130 ;; Defined at:
  2131 ;;		line 34 in file "SETLCD.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;		None
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;		None
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      void 
  2138 ;; Registers used:
  2139 ;;		wreg, status,2, status,0, pclath, cstack
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2145 ;;      Params:         0       0       0       0       0
  2146 ;;      Locals:         0       0       0       0       0
  2147 ;;      Temps:          0       0       0       0       0
  2148 ;;      Totals:         0       0       0       0       0
  2149 ;;Total ram usage:        0 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; Hardware stack levels required when called:    4
  2152 ;; This function calls:
  2153 ;;		_LCD_ON
  2154 ;; This function is called by:
  2155 ;;		_main
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           
  2160                           ;psect for function _LCD_CL
  2161  0F90                     _LCD_CL:
  2162  0F90                     l2042:	
  2163                           ;incstack = 0
  2164                           ; Regs used in _LCD_CL: [wreg+status,2+status,0+pclath+cstack]
  2165                           
  2166                           
  2167                           ;SETLCD.c: 35:     LCD_ON(0x01);
  2168  0F90  3001               	movlw	1
  2169  0F91  120A  118A  27EA  120A  158A  	fcall	_LCD_ON
  2170  0F96                     l245:
  2171  0F96  0008               	return
  2172  0F97                     __end_of_LCD_CL:
  2173                           
  2174                           	psect	text10
  2175  0024                     __ptext10:	
  2176 ;; *************** function _LCDVAL1 *****************
  2177 ;; Defined at:
  2178 ;;		line 59 in file "SETLCD.c"
  2179 ;; Parameters:    Size  Location     Type
  2180 ;;  x               2   11[BANK0 ] int 
  2181 ;;  Z               2   13[BANK0 ] int 
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;		None
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  1    wreg      void 
  2186 ;; Registers used:
  2187 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2193 ;;      Params:         0       4       0       0       0
  2194 ;;      Locals:         0       0       0       0       0
  2195 ;;      Temps:          0       1       0       0       0
  2196 ;;      Totals:         0       5       0       0       0
  2197 ;;Total ram usage:        5 bytes
  2198 ;; Hardware stack levels used:    1
  2199 ;; Hardware stack levels required when called:    6
  2200 ;; This function calls:
  2201 ;;		_LCD_POINT
  2202 ;; This function is called by:
  2203 ;;		_main
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           
  2208                           ;psect for function _LCDVAL1
  2209  0024                     _LCDVAL1:
  2210  0024                     l2054:	
  2211                           ;incstack = 0
  2212                           ; Regs used in _LCDVAL1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2213                           
  2214                           
  2215                           ;SETLCD.c: 60:     switch (Z){
  2216  0024  29B1               	goto	l2102
  2217  0025                     l2056:
  2218                           
  2219                           ;SETLCD.c: 62:             LCD_POINT(x,2,"0");
  2220  0025  082C               	movf	LCDVAL1@x+1,w
  2221  0026  00A5               	movwf	LCD_POINT@x+1
  2222  0027  082B               	movf	LCDVAL1@x,w
  2223  0028  00A4               	movwf	LCD_POINT@x
  2224  0029  3002               	movlw	2
  2225  002A  00A6               	movwf	LCD_POINT@y
  2226  002B  3000               	movlw	0
  2227  002C  00A7               	movwf	LCD_POINT@y+1
  2228  002D  301E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2229  002E  00AF               	movwf	??_LCDVAL1
  2230  002F  082F               	movf	??_LCDVAL1,w
  2231  0030  00A8               	movwf	LCD_POINT@D
  2232  0031  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2233                           
  2234                           ;SETLCD.c: 63:             break;
  2235  0036  29F9               	goto	l286
  2236  0037                     l2058:
  2237                           
  2238                           ;SETLCD.c: 65:             LCD_POINT(x,2,"1");
  2239  0037  082C               	movf	LCDVAL1@x+1,w
  2240  0038  00A5               	movwf	LCD_POINT@x+1
  2241  0039  082B               	movf	LCDVAL1@x,w
  2242  003A  00A4               	movwf	LCD_POINT@x
  2243  003B  3002               	movlw	2
  2244  003C  00A6               	movwf	LCD_POINT@y
  2245  003D  3000               	movlw	0
  2246  003E  00A7               	movwf	LCD_POINT@y+1
  2247  003F  3020               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2248  0040  00AF               	movwf	??_LCDVAL1
  2249  0041  082F               	movf	??_LCDVAL1,w
  2250  0042  00A8               	movwf	LCD_POINT@D
  2251  0043  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2252                           
  2253                           ;SETLCD.c: 66:             break;
  2254  0048  29F9               	goto	l286
  2255  0049                     l2060:
  2256                           
  2257                           ;SETLCD.c: 68:             LCD_POINT(x,2,"2");
  2258  0049  082C               	movf	LCDVAL1@x+1,w
  2259  004A  00A5               	movwf	LCD_POINT@x+1
  2260  004B  082B               	movf	LCDVAL1@x,w
  2261  004C  00A4               	movwf	LCD_POINT@x
  2262  004D  3002               	movlw	2
  2263  004E  00A6               	movwf	LCD_POINT@y
  2264  004F  3000               	movlw	0
  2265  0050  00A7               	movwf	LCD_POINT@y+1
  2266  0051  3022               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  2267  0052  00AF               	movwf	??_LCDVAL1
  2268  0053  082F               	movf	??_LCDVAL1,w
  2269  0054  00A8               	movwf	LCD_POINT@D
  2270  0055  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2271                           
  2272                           ;SETLCD.c: 69:             break;
  2273  005A  29F9               	goto	l286
  2274  005B                     l2062:
  2275                           
  2276                           ;SETLCD.c: 71:             LCD_POINT(x,2,"3");
  2277  005B  082C               	movf	LCDVAL1@x+1,w
  2278  005C  00A5               	movwf	LCD_POINT@x+1
  2279  005D  082B               	movf	LCDVAL1@x,w
  2280  005E  00A4               	movwf	LCD_POINT@x
  2281  005F  3002               	movlw	2
  2282  0060  00A6               	movwf	LCD_POINT@y
  2283  0061  3000               	movlw	0
  2284  0062  00A7               	movwf	LCD_POINT@y+1
  2285  0063  3024               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2286  0064  00AF               	movwf	??_LCDVAL1
  2287  0065  082F               	movf	??_LCDVAL1,w
  2288  0066  00A8               	movwf	LCD_POINT@D
  2289  0067  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2290                           
  2291                           ;SETLCD.c: 72:             break;
  2292  006C  29F9               	goto	l286
  2293  006D                     l2064:
  2294                           
  2295                           ;SETLCD.c: 74:             LCD_POINT(x,2,"4");
  2296  006D  082C               	movf	LCDVAL1@x+1,w
  2297  006E  00A5               	movwf	LCD_POINT@x+1
  2298  006F  082B               	movf	LCDVAL1@x,w
  2299  0070  00A4               	movwf	LCD_POINT@x
  2300  0071  3002               	movlw	2
  2301  0072  00A6               	movwf	LCD_POINT@y
  2302  0073  3000               	movlw	0
  2303  0074  00A7               	movwf	LCD_POINT@y+1
  2304  0075  3026               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2305  0076  00AF               	movwf	??_LCDVAL1
  2306  0077  082F               	movf	??_LCDVAL1,w
  2307  0078  00A8               	movwf	LCD_POINT@D
  2308  0079  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2309                           
  2310                           ;SETLCD.c: 75:             break;
  2311  007E  29F9               	goto	l286
  2312  007F                     l2066:
  2313                           
  2314                           ;SETLCD.c: 77:             LCD_POINT(x,2,"5");
  2315  007F  082C               	movf	LCDVAL1@x+1,w
  2316  0080  00A5               	movwf	LCD_POINT@x+1
  2317  0081  082B               	movf	LCDVAL1@x,w
  2318  0082  00A4               	movwf	LCD_POINT@x
  2319  0083  3002               	movlw	2
  2320  0084  00A6               	movwf	LCD_POINT@y
  2321  0085  3000               	movlw	0
  2322  0086  00A7               	movwf	LCD_POINT@y+1
  2323  0087  3028               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2324  0088  00AF               	movwf	??_LCDVAL1
  2325  0089  082F               	movf	??_LCDVAL1,w
  2326  008A  00A8               	movwf	LCD_POINT@D
  2327  008B  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2328                           
  2329                           ;SETLCD.c: 78:             break;
  2330  0090  29F9               	goto	l286
  2331  0091                     l2068:
  2332                           
  2333                           ;SETLCD.c: 80:             LCD_POINT(x,2,"6");
  2334  0091  082C               	movf	LCDVAL1@x+1,w
  2335  0092  00A5               	movwf	LCD_POINT@x+1
  2336  0093  082B               	movf	LCDVAL1@x,w
  2337  0094  00A4               	movwf	LCD_POINT@x
  2338  0095  3002               	movlw	2
  2339  0096  00A6               	movwf	LCD_POINT@y
  2340  0097  3000               	movlw	0
  2341  0098  00A7               	movwf	LCD_POINT@y+1
  2342  0099  302A               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2343  009A  00AF               	movwf	??_LCDVAL1
  2344  009B  082F               	movf	??_LCDVAL1,w
  2345  009C  00A8               	movwf	LCD_POINT@D
  2346  009D  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2347                           
  2348                           ;SETLCD.c: 81:             break;
  2349  00A2  29F9               	goto	l286
  2350  00A3                     l2070:
  2351                           
  2352                           ;SETLCD.c: 83:             LCD_POINT(x,2,"7");
  2353  00A3  082C               	movf	LCDVAL1@x+1,w
  2354  00A4  00A5               	movwf	LCD_POINT@x+1
  2355  00A5  082B               	movf	LCDVAL1@x,w
  2356  00A6  00A4               	movwf	LCD_POINT@x
  2357  00A7  3002               	movlw	2
  2358  00A8  00A6               	movwf	LCD_POINT@y
  2359  00A9  3000               	movlw	0
  2360  00AA  00A7               	movwf	LCD_POINT@y+1
  2361  00AB  302C               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2362  00AC  00AF               	movwf	??_LCDVAL1
  2363  00AD  082F               	movf	??_LCDVAL1,w
  2364  00AE  00A8               	movwf	LCD_POINT@D
  2365  00AF  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2366                           
  2367                           ;SETLCD.c: 84:             break;
  2368  00B4  29F9               	goto	l286
  2369  00B5                     l2072:
  2370                           
  2371                           ;SETLCD.c: 86:             LCD_POINT(x,2,"8");
  2372  00B5  082C               	movf	LCDVAL1@x+1,w
  2373  00B6  00A5               	movwf	LCD_POINT@x+1
  2374  00B7  082B               	movf	LCDVAL1@x,w
  2375  00B8  00A4               	movwf	LCD_POINT@x
  2376  00B9  3002               	movlw	2
  2377  00BA  00A6               	movwf	LCD_POINT@y
  2378  00BB  3000               	movlw	0
  2379  00BC  00A7               	movwf	LCD_POINT@y+1
  2380  00BD  302E               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2381  00BE  00AF               	movwf	??_LCDVAL1
  2382  00BF  082F               	movf	??_LCDVAL1,w
  2383  00C0  00A8               	movwf	LCD_POINT@D
  2384  00C1  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2385                           
  2386                           ;SETLCD.c: 87:             break;
  2387  00C6  29F9               	goto	l286
  2388  00C7                     l2074:
  2389                           
  2390                           ;SETLCD.c: 89:             LCD_POINT(x,2,"9");
  2391  00C7  082C               	movf	LCDVAL1@x+1,w
  2392  00C8  00A5               	movwf	LCD_POINT@x+1
  2393  00C9  082B               	movf	LCDVAL1@x,w
  2394  00CA  00A4               	movwf	LCD_POINT@x
  2395  00CB  3002               	movlw	2
  2396  00CC  00A6               	movwf	LCD_POINT@y
  2397  00CD  3000               	movlw	0
  2398  00CE  00A7               	movwf	LCD_POINT@y+1
  2399  00CF  3030               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2400  00D0  00AF               	movwf	??_LCDVAL1
  2401  00D1  082F               	movf	??_LCDVAL1,w
  2402  00D2  00A8               	movwf	LCD_POINT@D
  2403  00D3  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2404                           
  2405                           ;SETLCD.c: 90:             break;
  2406  00D8  29F9               	goto	l286
  2407  00D9                     l2076:
  2408                           
  2409                           ;SETLCD.c: 92:             LCD_POINT (x,2,"A");
  2410  00D9  082C               	movf	LCDVAL1@x+1,w
  2411  00DA  00A5               	movwf	LCD_POINT@x+1
  2412  00DB  082B               	movf	LCDVAL1@x,w
  2413  00DC  00A4               	movwf	LCD_POINT@x
  2414  00DD  3002               	movlw	2
  2415  00DE  00A6               	movwf	LCD_POINT@y
  2416  00DF  3000               	movlw	0
  2417  00E0  00A7               	movwf	LCD_POINT@y+1
  2418  00E1  3034               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2419  00E2  00AF               	movwf	??_LCDVAL1
  2420  00E3  082F               	movf	??_LCDVAL1,w
  2421  00E4  00A8               	movwf	LCD_POINT@D
  2422  00E5  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2423                           
  2424                           ;SETLCD.c: 93:             break;
  2425  00EA  29F9               	goto	l286
  2426  00EB                     l2078:
  2427                           
  2428                           ;SETLCD.c: 95:             LCD_POINT (x,2,"B");
  2429  00EB  082C               	movf	LCDVAL1@x+1,w
  2430  00EC  00A5               	movwf	LCD_POINT@x+1
  2431  00ED  082B               	movf	LCDVAL1@x,w
  2432  00EE  00A4               	movwf	LCD_POINT@x
  2433  00EF  3002               	movlw	2
  2434  00F0  00A6               	movwf	LCD_POINT@y
  2435  00F1  3000               	movlw	0
  2436  00F2  00A7               	movwf	LCD_POINT@y+1
  2437  00F3  3036               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2438  00F4  00AF               	movwf	??_LCDVAL1
  2439  00F5  082F               	movf	??_LCDVAL1,w
  2440  00F6  00A8               	movwf	LCD_POINT@D
  2441  00F7  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2442                           
  2443                           ;SETLCD.c: 96:             break;
  2444  00FC  29F9               	goto	l286
  2445  00FD                     l2080:
  2446                           
  2447                           ;SETLCD.c: 98:             LCD_POINT (x,2,"C");
  2448  00FD  082C               	movf	LCDVAL1@x+1,w
  2449  00FE  00A5               	movwf	LCD_POINT@x+1
  2450  00FF  082B               	movf	LCDVAL1@x,w
  2451  0100  00A4               	movwf	LCD_POINT@x
  2452  0101  3002               	movlw	2
  2453  0102  00A6               	movwf	LCD_POINT@y
  2454  0103  3000               	movlw	0
  2455  0104  00A7               	movwf	LCD_POINT@y+1
  2456  0105  3038               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2457  0106  00AF               	movwf	??_LCDVAL1
  2458  0107  082F               	movf	??_LCDVAL1,w
  2459  0108  00A8               	movwf	LCD_POINT@D
  2460  0109  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2461                           
  2462                           ;SETLCD.c: 99:             break;
  2463  010E  29F9               	goto	l286
  2464  010F                     l2082:
  2465                           
  2466                           ;SETLCD.c: 101:             LCD_POINT (x,2,"D");
  2467  010F  082C               	movf	LCDVAL1@x+1,w
  2468  0110  00A5               	movwf	LCD_POINT@x+1
  2469  0111  082B               	movf	LCDVAL1@x,w
  2470  0112  00A4               	movwf	LCD_POINT@x
  2471  0113  3002               	movlw	2
  2472  0114  00A6               	movwf	LCD_POINT@y
  2473  0115  3000               	movlw	0
  2474  0116  00A7               	movwf	LCD_POINT@y+1
  2475  0117  303A               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  2476  0118  00AF               	movwf	??_LCDVAL1
  2477  0119  082F               	movf	??_LCDVAL1,w
  2478  011A  00A8               	movwf	LCD_POINT@D
  2479  011B  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2480                           
  2481                           ;SETLCD.c: 102:             break;
  2482  0120  29F9               	goto	l286
  2483  0121                     l2084:
  2484                           
  2485                           ;SETLCD.c: 104:             LCD_POINT (x,2,"E");
  2486  0121  082C               	movf	LCDVAL1@x+1,w
  2487  0122  00A5               	movwf	LCD_POINT@x+1
  2488  0123  082B               	movf	LCDVAL1@x,w
  2489  0124  00A4               	movwf	LCD_POINT@x
  2490  0125  3002               	movlw	2
  2491  0126  00A6               	movwf	LCD_POINT@y
  2492  0127  3000               	movlw	0
  2493  0128  00A7               	movwf	LCD_POINT@y+1
  2494  0129  303C               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2495  012A  00AF               	movwf	??_LCDVAL1
  2496  012B  082F               	movf	??_LCDVAL1,w
  2497  012C  00A8               	movwf	LCD_POINT@D
  2498  012D  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2499                           
  2500                           ;SETLCD.c: 105:             break;
  2501  0132  29F9               	goto	l286
  2502  0133                     l2086:
  2503                           
  2504                           ;SETLCD.c: 107:             LCD_POINT (x,2,"F");
  2505  0133  082C               	movf	LCDVAL1@x+1,w
  2506  0134  00A5               	movwf	LCD_POINT@x+1
  2507  0135  082B               	movf	LCDVAL1@x,w
  2508  0136  00A4               	movwf	LCD_POINT@x
  2509  0137  3002               	movlw	2
  2510  0138  00A6               	movwf	LCD_POINT@y
  2511  0139  3000               	movlw	0
  2512  013A  00A7               	movwf	LCD_POINT@y+1
  2513  013B  303E               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  2514  013C  00AF               	movwf	??_LCDVAL1
  2515  013D  082F               	movf	??_LCDVAL1,w
  2516  013E  00A8               	movwf	LCD_POINT@D
  2517  013F  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2518                           
  2519                           ;SETLCD.c: 108:             break;
  2520  0144  29F9               	goto	l286
  2521  0145                     l2088:
  2522                           
  2523                           ;SETLCD.c: 110:             LCD_POINT (x,2,".");
  2524  0145  082C               	movf	LCDVAL1@x+1,w
  2525  0146  00A5               	movwf	LCD_POINT@x+1
  2526  0147  082B               	movf	LCDVAL1@x,w
  2527  0148  00A4               	movwf	LCD_POINT@x
  2528  0149  3002               	movlw	2
  2529  014A  00A6               	movwf	LCD_POINT@y
  2530  014B  3000               	movlw	0
  2531  014C  00A7               	movwf	LCD_POINT@y+1
  2532  014D  301C               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  2533  014E  00AF               	movwf	??_LCDVAL1
  2534  014F  082F               	movf	??_LCDVAL1,w
  2535  0150  00A8               	movwf	LCD_POINT@D
  2536  0151  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2537                           
  2538                           ;SETLCD.c: 111:             break;
  2539  0156  29F9               	goto	l286
  2540  0157                     l2090:
  2541                           
  2542                           ;SETLCD.c: 113:             LCD_POINT (x,2,"+");
  2543  0157  082C               	movf	LCDVAL1@x+1,w
  2544  0158  00A5               	movwf	LCD_POINT@x+1
  2545  0159  082B               	movf	LCDVAL1@x,w
  2546  015A  00A4               	movwf	LCD_POINT@x
  2547  015B  3002               	movlw	2
  2548  015C  00A6               	movwf	LCD_POINT@y
  2549  015D  3000               	movlw	0
  2550  015E  00A7               	movwf	LCD_POINT@y+1
  2551  015F  3018               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  2552  0160  00AF               	movwf	??_LCDVAL1
  2553  0161  082F               	movf	??_LCDVAL1,w
  2554  0162  00A8               	movwf	LCD_POINT@D
  2555  0163  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2556                           
  2557                           ;SETLCD.c: 114:             break;
  2558  0168  29F9               	goto	l286
  2559  0169                     l2092:
  2560                           
  2561                           ;SETLCD.c: 116:             LCD_POINT (x,2,"-");
  2562  0169  082C               	movf	LCDVAL1@x+1,w
  2563  016A  00A5               	movwf	LCD_POINT@x+1
  2564  016B  082B               	movf	LCDVAL1@x,w
  2565  016C  00A4               	movwf	LCD_POINT@x
  2566  016D  3002               	movlw	2
  2567  016E  00A6               	movwf	LCD_POINT@y
  2568  016F  3000               	movlw	0
  2569  0170  00A7               	movwf	LCD_POINT@y+1
  2570  0171  301A               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  2571  0172  00AF               	movwf	??_LCDVAL1
  2572  0173  082F               	movf	??_LCDVAL1,w
  2573  0174  00A8               	movwf	LCD_POINT@D
  2574  0175  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2575                           
  2576                           ;SETLCD.c: 117:             break;
  2577  017A  29F9               	goto	l286
  2578  017B                     l2094:
  2579                           
  2580                           ;SETLCD.c: 119:             LCD_POINT (x,2,"Â°");
  2581  017B  082C               	movf	LCDVAL1@x+1,w
  2582  017C  00A5               	movwf	LCD_POINT@x+1
  2583  017D  082B               	movf	LCDVAL1@x,w
  2584  017E  00A4               	movwf	LCD_POINT@x
  2585  017F  3002               	movlw	2
  2586  0180  00A6               	movwf	LCD_POINT@y
  2587  0181  3000               	movlw	0
  2588  0182  00A7               	movwf	LCD_POINT@y+1
  2589  0183  3013               	movlw	(low ((STR_21-__stringbase)| (0+32768)))& (0+255)
  2590  0184  00AF               	movwf	??_LCDVAL1
  2591  0185  082F               	movf	??_LCDVAL1,w
  2592  0186  00A8               	movwf	LCD_POINT@D
  2593  0187  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2594                           
  2595                           ;SETLCD.c: 120:             break;
  2596  018C  29F9               	goto	l286
  2597  018D                     l2096:
  2598                           
  2599                           ;SETLCD.c: 122:             LCD_POINT (x,2," ");
  2600  018D  082C               	movf	LCDVAL1@x+1,w
  2601  018E  00A5               	movwf	LCD_POINT@x+1
  2602  018F  082B               	movf	LCDVAL1@x,w
  2603  0190  00A4               	movwf	LCD_POINT@x
  2604  0191  3002               	movlw	2
  2605  0192  00A6               	movwf	LCD_POINT@y
  2606  0193  3000               	movlw	0
  2607  0194  00A7               	movwf	LCD_POINT@y+1
  2608  0195  3016               	movlw	(low ((STR_22-__stringbase)| (0+32768)))& (0+255)
  2609  0196  00AF               	movwf	??_LCDVAL1
  2610  0197  082F               	movf	??_LCDVAL1,w
  2611  0198  00A8               	movwf	LCD_POINT@D
  2612  0199  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2613                           
  2614                           ;SETLCD.c: 123:             break;
  2615  019E  29F9               	goto	l286
  2616  019F                     l2098:
  2617                           
  2618                           ;SETLCD.c: 125:             LCD_POINT(x,2,"@");
  2619  019F  082C               	movf	LCDVAL1@x+1,w
  2620  01A0  00A5               	movwf	LCD_POINT@x+1
  2621  01A1  082B               	movf	LCDVAL1@x,w
  2622  01A2  00A4               	movwf	LCD_POINT@x
  2623  01A3  3002               	movlw	2
  2624  01A4  00A6               	movwf	LCD_POINT@y
  2625  01A5  3000               	movlw	0
  2626  01A6  00A7               	movwf	LCD_POINT@y+1
  2627  01A7  3032               	movlw	(low ((STR_23-__stringbase)| (0+32768)))& (0+255)
  2628  01A8  00AF               	movwf	??_LCDVAL1
  2629  01A9  082F               	movf	??_LCDVAL1,w
  2630  01AA  00A8               	movwf	LCD_POINT@D
  2631  01AB  120A  118A  2736  120A  118A  	fcall	_LCD_POINT
  2632                           
  2633                           ;SETLCD.c: 126:             break;
  2634  01B0  29F9               	goto	l286
  2635  01B1                     l2102:
  2636                           
  2637                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2638                           ; Switch size 1, requested type "simple"
  2639                           ; Number of cases is 1, Range of values is 0 to 0
  2640                           ; switch strategies available:
  2641                           ; Name         Instructions Cycles
  2642                           ; simple_byte            4     3 (average)
  2643                           ; direct_byte           11     8 (fixed)
  2644                           ; jumptable            260     6 (fixed)
  2645                           ;	Chosen strategy is simple_byte
  2646  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  2647  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  2648  01B3  082E               	movf	LCDVAL1@Z+1,w
  2649  01B4  3A00               	xorlw	0	; case 0
  2650  01B5  1903               	skipnz
  2651  01B6  29B8               	goto	l2274
  2652  01B7  299F               	goto	l2098
  2653  01B8                     l2274:
  2654                           
  2655                           ; Switch size 1, requested type "simple"
  2656                           ; Number of cases is 21, Range of values is 0 to 20
  2657                           ; switch strategies available:
  2658                           ; Name         Instructions Cycles
  2659                           ; simple_byte           64    33 (average)
  2660                           ; direct_byte           71     8 (fixed)
  2661                           ; jumptable            260     6 (fixed)
  2662                           ;	Chosen strategy is simple_byte
  2663  01B8  082D               	movf	LCDVAL1@Z,w
  2664  01B9  3A00               	xorlw	0	; case 0
  2665  01BA  1903               	skipnz
  2666  01BB  2825               	goto	l2056
  2667  01BC  3A01               	xorlw	1	; case 1
  2668  01BD  1903               	skipnz
  2669  01BE  2837               	goto	l2058
  2670  01BF  3A03               	xorlw	3	; case 2
  2671  01C0  1903               	skipnz
  2672  01C1  2849               	goto	l2060
  2673  01C2  3A01               	xorlw	1	; case 3
  2674  01C3  1903               	skipnz
  2675  01C4  285B               	goto	l2062
  2676  01C5  3A07               	xorlw	7	; case 4
  2677  01C6  1903               	skipnz
  2678  01C7  286D               	goto	l2064
  2679  01C8  3A01               	xorlw	1	; case 5
  2680  01C9  1903               	skipnz
  2681  01CA  287F               	goto	l2066
  2682  01CB  3A03               	xorlw	3	; case 6
  2683  01CC  1903               	skipnz
  2684  01CD  2891               	goto	l2068
  2685  01CE  3A01               	xorlw	1	; case 7
  2686  01CF  1903               	skipnz
  2687  01D0  28A3               	goto	l2070
  2688  01D1  3A0F               	xorlw	15	; case 8
  2689  01D2  1903               	skipnz
  2690  01D3  28B5               	goto	l2072
  2691  01D4  3A01               	xorlw	1	; case 9
  2692  01D5  1903               	skipnz
  2693  01D6  28C7               	goto	l2074
  2694  01D7  3A03               	xorlw	3	; case 10
  2695  01D8  1903               	skipnz
  2696  01D9  28D9               	goto	l2076
  2697  01DA  3A01               	xorlw	1	; case 11
  2698  01DB  1903               	skipnz
  2699  01DC  28EB               	goto	l2078
  2700  01DD  3A07               	xorlw	7	; case 12
  2701  01DE  1903               	skipnz
  2702  01DF  28FD               	goto	l2080
  2703  01E0  3A01               	xorlw	1	; case 13
  2704  01E1  1903               	skipnz
  2705  01E2  290F               	goto	l2082
  2706  01E3  3A03               	xorlw	3	; case 14
  2707  01E4  1903               	skipnz
  2708  01E5  2921               	goto	l2084
  2709  01E6  3A01               	xorlw	1	; case 15
  2710  01E7  1903               	skipnz
  2711  01E8  2933               	goto	l2086
  2712  01E9  3A1F               	xorlw	31	; case 16
  2713  01EA  1903               	skipnz
  2714  01EB  2945               	goto	l2088
  2715  01EC  3A01               	xorlw	1	; case 17
  2716  01ED  1903               	skipnz
  2717  01EE  2957               	goto	l2090
  2718  01EF  3A03               	xorlw	3	; case 18
  2719  01F0  1903               	skipnz
  2720  01F1  2969               	goto	l2092
  2721  01F2  3A01               	xorlw	1	; case 19
  2722  01F3  1903               	skipnz
  2723  01F4  297B               	goto	l2094
  2724  01F5  3A07               	xorlw	7	; case 20
  2725  01F6  1903               	skipnz
  2726  01F7  298D               	goto	l2096
  2727  01F8  299F               	goto	l2098
  2728  01F9                     l286:
  2729  01F9  0008               	return
  2730  01FA                     __end_of_LCDVAL1:
  2731                           
  2732                           	psect	text11
  2733  0736                     __ptext11:	
  2734 ;; *************** function _LCD_POINT *****************
  2735 ;; Defined at:
  2736 ;;		line 43 in file "SETLCD.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;  x               2    4[BANK0 ] int 
  2739 ;;  y               2    6[BANK0 ] int 
  2740 ;;  D               1    8[BANK0 ] PTR unsigned char 
  2741 ;;		 -> STR_23(2), STR_22(2), STR_21(3), STR_20(2), 
  2742 ;;		 -> STR_19(2), STR_18(2), STR_17(2), STR_16(2), 
  2743 ;;		 -> STR_15(2), STR_14(2), STR_13(2), STR_12(2), 
  2744 ;;		 -> STR_11(2), STR_10(2), STR_9(2), STR_8(2), 
  2745 ;;		 -> STR_7(2), STR_6(2), STR_5(2), STR_4(2), 
  2746 ;;		 -> STR_3(2), STR_2(2), STR_1(18), 
  2747 ;; Auto vars:     Size  Location     Type
  2748 ;;  LOC             1   10[BANK0 ] unsigned char 
  2749 ;; Return value:  Size  Location     Type
  2750 ;;                  1    wreg      void 
  2751 ;; Registers used:
  2752 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2753 ;; Tracked objects:
  2754 ;;		On entry : 0/0
  2755 ;;		On exit  : 0/0
  2756 ;;		Unchanged: 0/0
  2757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2758 ;;      Params:         0       5       0       0       0
  2759 ;;      Locals:         0       1       0       0       0
  2760 ;;      Temps:          0       1       0       0       0
  2761 ;;      Totals:         0       7       0       0       0
  2762 ;;Total ram usage:        7 bytes
  2763 ;; Hardware stack levels used:    1
  2764 ;; Hardware stack levels required when called:    5
  2765 ;; This function calls:
  2766 ;;		_LCD_ON
  2767 ;;		_LCD_P
  2768 ;; This function is called by:
  2769 ;;		_main
  2770 ;;		_LCDVAL1
  2771 ;; This function uses a non-reentrant model
  2772 ;;
  2773                           
  2774                           
  2775                           ;psect for function _LCD_POINT
  2776  0736                     _LCD_POINT:
  2777  0736                     l1922:	
  2778                           ;incstack = 0
  2779                           ; Regs used in _LCD_POINT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2780                           
  2781                           
  2782                           ;SETLCD.c: 44:     char LOC;;SETLCD.c: 45:     switch (y){
  2783  0736  2F43               	goto	l1932
  2784  0737                     l1924:
  2785                           
  2786                           ;SETLCD.c: 47:             LOC = 0x80 + x;
  2787  0737  0824               	movf	LCD_POINT@x,w
  2788  0738  3E80               	addlw	128
  2789  0739  00A9               	movwf	??_LCD_POINT
  2790  073A  0829               	movf	??_LCD_POINT,w
  2791  073B  00AA               	movwf	LCD_POINT@LOC
  2792                           
  2793                           ;SETLCD.c: 48:             break;
  2794  073C  2F52               	goto	l1934
  2795  073D                     l1926:
  2796                           
  2797                           ;SETLCD.c: 50:             LOC = 0xC0 + x;
  2798  073D  0824               	movf	LCD_POINT@x,w
  2799  073E  3EC0               	addlw	192
  2800  073F  00A9               	movwf	??_LCD_POINT
  2801  0740  0829               	movf	??_LCD_POINT,w
  2802  0741  00AA               	movwf	LCD_POINT@LOC
  2803                           
  2804                           ;SETLCD.c: 51:             break;
  2805  0742  2F52               	goto	l1934
  2806  0743                     l1932:
  2807                           
  2808                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2809                           ; Switch size 1, requested type "simple"
  2810                           ; Number of cases is 1, Range of values is 0 to 0
  2811                           ; switch strategies available:
  2812                           ; Name         Instructions Cycles
  2813                           ; simple_byte            4     3 (average)
  2814                           ; direct_byte           11     8 (fixed)
  2815                           ; jumptable            260     6 (fixed)
  2816                           ;	Chosen strategy is simple_byte
  2817  0743  1283               	bcf	3,5	;RP0=0, select bank0
  2818  0744  1303               	bcf	3,6	;RP1=0, select bank0
  2819  0745  0827               	movf	LCD_POINT@y+1,w
  2820  0746  3A00               	xorlw	0	; case 0
  2821  0747  1903               	skipnz
  2822  0748  2F4A               	goto	l2276
  2823  0749  2F37               	goto	l1924
  2824  074A                     l2276:
  2825                           
  2826                           ; Switch size 1, requested type "simple"
  2827                           ; Number of cases is 2, Range of values is 1 to 2
  2828                           ; switch strategies available:
  2829                           ; Name         Instructions Cycles
  2830                           ; simple_byte            7     4 (average)
  2831                           ; direct_byte           17    11 (fixed)
  2832                           ; jumptable            263     9 (fixed)
  2833                           ;	Chosen strategy is simple_byte
  2834  074A  0826               	movf	LCD_POINT@y,w
  2835  074B  3A01               	xorlw	1	; case 1
  2836  074C  1903               	skipnz
  2837  074D  2F37               	goto	l1924
  2838  074E  3A03               	xorlw	3	; case 2
  2839  074F  1903               	skipnz
  2840  0750  2F3D               	goto	l1926
  2841  0751  2F37               	goto	l1924
  2842  0752                     l1934:
  2843                           
  2844                           ;SETLCD.c: 56:     LCD_ON(LOC);
  2845  0752  082A               	movf	LCD_POINT@LOC,w
  2846  0753  120A  118A  27EA  120A  118A  	fcall	_LCD_ON
  2847  0758                     l1936:
  2848                           
  2849                           ;SETLCD.c: 57:     LCD_P(D);
  2850  0758  1283               	bcf	3,5	;RP0=0, select bank0
  2851  0759  1303               	bcf	3,6	;RP1=0, select bank0
  2852  075A  0828               	movf	LCD_POINT@D,w
  2853  075B  120A  118A  2788  120A  118A  	fcall	_LCD_P
  2854  0760                     l259:
  2855  0760  0008               	return
  2856  0761                     __end_of_LCD_POINT:
  2857                           
  2858                           	psect	text12
  2859  0788                     __ptext12:	
  2860 ;; *************** function _LCD_P *****************
  2861 ;; Defined at:
  2862 ;;		line 37 in file "SETLCD.c"
  2863 ;; Parameters:    Size  Location     Type
  2864 ;;  D               1    wreg     PTR unsigned char 
  2865 ;;		 -> STR_23(2), STR_22(2), STR_21(3), STR_20(2), 
  2866 ;;		 -> STR_19(2), STR_18(2), STR_17(2), STR_16(2), 
  2867 ;;		 -> STR_15(2), STR_14(2), STR_13(2), STR_12(2), 
  2868 ;;		 -> STR_11(2), STR_10(2), STR_9(2), STR_8(2), 
  2869 ;;		 -> STR_7(2), STR_6(2), STR_5(2), STR_4(2), 
  2870 ;;		 -> STR_3(2), STR_2(2), STR_1(18), 
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;  D               1    3[BANK0 ] PTR unsigned char 
  2873 ;;		 -> STR_23(2), STR_22(2), STR_21(3), STR_20(2), 
  2874 ;;		 -> STR_19(2), STR_18(2), STR_17(2), STR_16(2), 
  2875 ;;		 -> STR_15(2), STR_14(2), STR_13(2), STR_12(2), 
  2876 ;;		 -> STR_11(2), STR_10(2), STR_9(2), STR_8(2), 
  2877 ;;		 -> STR_7(2), STR_6(2), STR_5(2), STR_4(2), 
  2878 ;;		 -> STR_3(2), STR_2(2), STR_1(18), 
  2879 ;; Return value:  Size  Location     Type
  2880 ;;                  1    wreg      void 
  2881 ;; Registers used:
  2882 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2883 ;; Tracked objects:
  2884 ;;		On entry : 0/0
  2885 ;;		On exit  : 0/0
  2886 ;;		Unchanged: 0/0
  2887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2888 ;;      Params:         0       0       0       0       0
  2889 ;;      Locals:         0       1       0       0       0
  2890 ;;      Temps:          0       1       0       0       0
  2891 ;;      Totals:         0       2       0       0       0
  2892 ;;Total ram usage:        2 bytes
  2893 ;; Hardware stack levels used:    1
  2894 ;; Hardware stack levels required when called:    4
  2895 ;; This function calls:
  2896 ;;		_LCD_PLAY
  2897 ;; This function is called by:
  2898 ;;		_LCD_POINT
  2899 ;; This function uses a non-reentrant model
  2900 ;;
  2901                           
  2902                           
  2903                           ;psect for function _LCD_P
  2904  0788                     _LCD_P:
  2905                           
  2906                           ;incstack = 0
  2907                           ; Regs used in _LCD_P: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2908                           ;LCD_P@D stored from wreg
  2909  0788  1283               	bcf	3,5	;RP0=0, select bank0
  2910  0789  1303               	bcf	3,6	;RP1=0, select bank0
  2911  078A  00A3               	movwf	LCD_P@D
  2912  078B                     l1914:
  2913                           
  2914                           ;SETLCD.c: 38:     while (*D){
  2915  078B  2F9E               	goto	l1920
  2916  078C                     l1916:
  2917                           
  2918                           ;SETLCD.c: 39:         LCD_PLAY(*D);
  2919  078C  0823               	movf	LCD_P@D,w
  2920  078D  0084               	movwf	4
  2921  078E  120A  118A  2662  120A  118A  	fcall	stringdir
  2922  0793  120A  158A  27D6  120A  118A  	fcall	_LCD_PLAY
  2923  0798                     l1918:
  2924                           
  2925                           ;SETLCD.c: 40:         D++;
  2926  0798  3001               	movlw	1
  2927  0799  1283               	bcf	3,5	;RP0=0, select bank0
  2928  079A  1303               	bcf	3,6	;RP1=0, select bank0
  2929  079B  00A2               	movwf	??_LCD_P
  2930  079C  0822               	movf	??_LCD_P,w
  2931  079D  07A3               	addwf	LCD_P@D,f
  2932  079E                     l1920:
  2933                           
  2934                           ;SETLCD.c: 38:     while (*D){
  2935  079E  0823               	movf	LCD_P@D,w
  2936  079F  0084               	movwf	4
  2937  07A0  120A  118A  2662  120A  118A  	fcall	stringdir
  2938  07A5  3A00               	xorlw	0
  2939  07A6  1D03               	skipz
  2940  07A7  2FA9               	goto	u471
  2941  07A8  2FAA               	goto	u470
  2942  07A9                     u471:
  2943  07A9  2F8C               	goto	l1916
  2944  07AA                     u470:
  2945  07AA                     l251:
  2946  07AA  0008               	return
  2947  07AB                     __end_of_LCD_P:
  2948                           
  2949                           	psect	text13
  2950  0FD6                     __ptext13:	
  2951 ;; *************** function _LCD_PLAY *****************
  2952 ;; Defined at:
  2953 ;;		line 28 in file "SETLCD.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;  D               1    wreg     unsigned char 
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;  D               1    1[BANK0 ] unsigned char 
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  1    wreg      void 
  2960 ;; Registers used:
  2961 ;;		wreg, status,2, status,0, pclath, cstack
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2967 ;;      Params:         0       0       0       0       0
  2968 ;;      Locals:         0       1       0       0       0
  2969 ;;      Temps:          0       1       0       0       0
  2970 ;;      Totals:         0       2       0       0       0
  2971 ;;Total ram usage:        2 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:    3
  2974 ;; This function calls:
  2975 ;;		_LCD_TIM
  2976 ;; This function is called by:
  2977 ;;		_LCD_P
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           
  2982                           ;psect for function _LCD_PLAY
  2983  0FD6                     _LCD_PLAY:
  2984                           
  2985                           ;incstack = 0
  2986                           ; Regs used in _LCD_PLAY: [wreg+status,2+status,0+pclath+cstack]
  2987                           ;LCD_PLAY@D stored from wreg
  2988  0FD6  1283               	bcf	3,5	;RP0=0, select bank0
  2989  0FD7  1303               	bcf	3,6	;RP1=0, select bank0
  2990  0FD8  00A1               	movwf	LCD_PLAY@D
  2991  0FD9                     l1898:
  2992                           
  2993                           ;SETLCD.c: 29:     PORTDbits.RD6=1;
  2994  0FD9  1708               	bsf	8,6	;volatile
  2995  0FDA                     l1900:
  2996                           
  2997                           ;SETLCD.c: 30:     PORTB=D;
  2998  0FDA  0821               	movf	LCD_PLAY@D,w
  2999  0FDB  0086               	movwf	6	;volatile
  3000  0FDC                     l1902:
  3001                           
  3002                           ;SETLCD.c: 31:     LCD_TIM();
  3003  0FDC  120A  158A  27BA  120A  158A  	fcall	_LCD_TIM
  3004  0FE1                     l1904:
  3005                           
  3006                           ;SETLCD.c: 32:     _delay((unsigned long)((50)*(4000000/4000000.0)));
  3007  0FE1  300F               	movlw	15
  3008  0FE2  1283               	bcf	3,5	;RP0=0, select bank0
  3009  0FE3  1303               	bcf	3,6	;RP1=0, select bank0
  3010  0FE4  00A0               	movwf	??_LCD_PLAY
  3011  0FE5                     u587:
  3012  0FE5  0BA0               	decfsz	??_LCD_PLAY,f
  3013  0FE6  2FE5               	goto	u587
  3014  0FE7  2FE8               	nop2
  3015  0FE8                     l242:
  3016  0FE8  0008               	return
  3017  0FE9                     __end_of_LCD_PLAY:
  3018                           
  3019                           	psect	text14
  3020  07EA                     __ptext14:	
  3021 ;; *************** function _LCD_ON *****************
  3022 ;; Defined at:
  3023 ;;		line 17 in file "SETLCD.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;  C               1    wreg     unsigned char 
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;  C               1    2[BANK0 ] unsigned char 
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  1    wreg      void 
  3030 ;; Registers used:
  3031 ;;		wreg, status,2, status,0, pclath, cstack
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3037 ;;      Params:         0       0       0       0       0
  3038 ;;      Locals:         0       1       0       0       0
  3039 ;;      Temps:          0       2       0       0       0
  3040 ;;      Totals:         0       3       0       0       0
  3041 ;;Total ram usage:        3 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    3
  3044 ;; This function calls:
  3045 ;;		_LCD_TIM
  3046 ;; This function is called by:
  3047 ;;		_LCD_IN
  3048 ;;		_LCD_CL
  3049 ;;		_LCD_POINT
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           
  3054                           ;psect for function _LCD_ON
  3055  07EA                     _LCD_ON:
  3056                           
  3057                           ;incstack = 0
  3058                           ; Regs used in _LCD_ON: [wreg+status,2+status,0+pclath+cstack]
  3059                           ;LCD_ON@C stored from wreg
  3060  07EA  1283               	bcf	3,5	;RP0=0, select bank0
  3061  07EB  1303               	bcf	3,6	;RP1=0, select bank0
  3062  07EC  00A2               	movwf	LCD_ON@C
  3063  07ED                     l1906:
  3064                           
  3065                           ;SETLCD.c: 18:     PORTDbits.RD6=0;
  3066  07ED  1308               	bcf	8,6	;volatile
  3067  07EE                     l1908:
  3068                           
  3069                           ;SETLCD.c: 19:     PORTB=C;
  3070  07EE  0822               	movf	LCD_ON@C,w
  3071  07EF  0086               	movwf	6	;volatile
  3072  07F0                     l1910:
  3073                           
  3074                           ;SETLCD.c: 20:     LCD_TIM();
  3075  07F0  120A  158A  27BA  120A  118A  	fcall	_LCD_TIM
  3076  07F5                     l1912:
  3077                           
  3078                           ;SETLCD.c: 21:     _delay((unsigned long)((2)*(4000000/4000.0)));
  3079  07F5  3003               	movlw	3
  3080  07F6  1283               	bcf	3,5	;RP0=0, select bank0
  3081  07F7  1303               	bcf	3,6	;RP1=0, select bank0
  3082  07F8  00A1               	movwf	??_LCD_ON+1
  3083  07F9  3097               	movlw	151
  3084  07FA  00A0               	movwf	??_LCD_ON
  3085  07FB                     u597:
  3086  07FB  0BA0               	decfsz	??_LCD_ON,f
  3087  07FC  2FFB               	goto	u597
  3088  07FD  0BA1               	decfsz	??_LCD_ON+1,f
  3089  07FE  2FFB               	goto	u597
  3090  07FF                     l236:
  3091  07FF  0008               	return
  3092  0800                     __end_of_LCD_ON:
  3093                           
  3094                           	psect	text15
  3095  0FBA                     __ptext15:	
  3096 ;; *************** function _LCD_TIM *****************
  3097 ;; Defined at:
  3098 ;;		line 23 in file "SETLCD.c"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;		None
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;		None
  3103 ;; Return value:  Size  Location     Type
  3104 ;;                  1    wreg      void 
  3105 ;; Registers used:
  3106 ;;		None
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3112 ;;      Params:         0       0       0       0       0
  3113 ;;      Locals:         0       0       0       0       0
  3114 ;;      Temps:          0       0       0       0       0
  3115 ;;      Totals:         0       0       0       0       0
  3116 ;;Total ram usage:        0 bytes
  3117 ;; Hardware stack levels used:    1
  3118 ;; Hardware stack levels required when called:    2
  3119 ;; This function calls:
  3120 ;;		Nothing
  3121 ;; This function is called by:
  3122 ;;		_LCD_ON
  3123 ;;		_LCD_PLAY
  3124 ;; This function uses a non-reentrant model
  3125 ;;
  3126                           
  3127                           
  3128                           ;psect for function _LCD_TIM
  3129  0FBA                     _LCD_TIM:
  3130  0FBA                     l1896:	
  3131                           ;incstack = 0
  3132                           ; Regs used in _LCD_TIM: []
  3133                           
  3134                           
  3135                           ;SETLCD.c: 24:     PORTDbits.RD7 = 1;
  3136  0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  3137  0FBB  1303               	bcf	3,6	;RP1=0, select bank0
  3138  0FBC  1788               	bsf	8,7	;volatile
  3139                           
  3140                           ;SETLCD.c: 25:     _delay((unsigned long)((5)*(4000000/4000000.0)));
  3141  0FBD  2FBE               	nop2	;2 cycle nop
  3142  0FBE  2FBF               	nop2	;2 cycle nop
  3143  0FBF  0000               	nop
  3144                           
  3145                           ;SETLCD.c: 26:     PORTDbits.RD7 = 0;
  3146  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  3147  0FC1  1303               	bcf	3,6	;RP1=0, select bank0
  3148  0FC2  1388               	bcf	8,7	;volatile
  3149                           
  3150                           ;SETLCD.c: 27:     _delay((unsigned long)((5)*(4000000/4000000.0)));}
  3151  0FC3  2FC4               	nop2	;2 cycle nop
  3152  0FC4  2FC5               	nop2	;2 cycle nop
  3153  0FC5  0000               	nop
  3154  0FC6                     l239:
  3155  0FC6  0008               	return
  3156  0FC7                     __end_of_LCD_TIM:
  3157                           
  3158                           	psect	text16
  3159  06D8                     __ptext16:	
  3160 ;; *************** function _CONV_AS *****************
  3161 ;; Defined at:
  3162 ;;		line 205 in file "master.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;		None
  3165 ;; Auto vars:     Size  Location     Type
  3166 ;;		None
  3167 ;; Return value:  Size  Location     Type
  3168 ;;                  1    wreg      void 
  3169 ;; Registers used:
  3170 ;;		wreg, status,2, status,0
  3171 ;; Tracked objects:
  3172 ;;		On entry : 0/0
  3173 ;;		On exit  : 0/0
  3174 ;;		Unchanged: 0/0
  3175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3176 ;;      Params:         0       0       0       0       0
  3177 ;;      Locals:         0       0       0       0       0
  3178 ;;      Temps:          0       1       0       0       0
  3179 ;;      Totals:         0       1       0       0       0
  3180 ;;Total ram usage:        1 bytes
  3181 ;; Hardware stack levels used:    1
  3182 ;; Hardware stack levels required when called:    2
  3183 ;; This function calls:
  3184 ;;		Nothing
  3185 ;; This function is called by:
  3186 ;;		_main
  3187 ;; This function uses a non-reentrant model
  3188 ;;
  3189                           
  3190                           
  3191                           ;psect for function _CONV_AS
  3192  06D8                     _CONV_AS:
  3193  06D8                     l2124:	
  3194                           ;incstack = 0
  3195                           ; Regs used in _CONV_AS: [wreg+status,2+status,0]
  3196                           
  3197                           
  3198                           ;master.c: 206:     POT1_Uas=(POT1_U+0x30);
  3199  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  3200  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  3201  06DA  0848               	movf	_POT1_U,w
  3202  06DB  3E30               	addlw	48
  3203  06DC  00A0               	movwf	??_CONV_AS
  3204  06DD  0820               	movf	??_CONV_AS,w
  3205  06DE  00F0               	movwf	_POT1_Uas
  3206                           
  3207                           ;master.c: 207:     POT1_Tas=(POT1_T+0x30);
  3208  06DF  0846               	movf	_POT1_T,w
  3209  06E0  3E30               	addlw	48
  3210  06E1  00A0               	movwf	??_CONV_AS
  3211  06E2  0820               	movf	??_CONV_AS,w
  3212  06E3  00BB               	movwf	_POT1_Tas
  3213                           
  3214                           ;master.c: 208:     POT1_Has=(POT1_H+0x30);
  3215  06E4  0847               	movf	_POT1_H,w
  3216  06E5  3E30               	addlw	48
  3217  06E6  00A0               	movwf	??_CONV_AS
  3218  06E7  0820               	movf	??_CONV_AS,w
  3219  06E8  00BC               	movwf	_POT1_Has
  3220                           
  3221                           ;master.c: 209:     cont_1AS=(cont_1+0X30);
  3222  06E9  0842               	movf	_cont_1,w
  3223  06EA  3E30               	addlw	48
  3224  06EB  00A0               	movwf	??_CONV_AS
  3225  06EC  0820               	movf	??_CONV_AS,w
  3226  06ED  00F1               	movwf	_cont_1AS
  3227                           
  3228                           ;master.c: 210:     cont_2AS=(cont_2+0X30);
  3229  06EE  0841               	movf	_cont_2,w
  3230  06EF  3E30               	addlw	48
  3231  06F0  00A0               	movwf	??_CONV_AS
  3232  06F1  0820               	movf	??_CONV_AS,w
  3233  06F2  00BE               	movwf	_cont_2AS
  3234                           
  3235                           ;master.c: 211:     cont_3AS=(cont_3+0X30);
  3236  06F3  0840               	movf	_cont_3,w
  3237  06F4  3E30               	addlw	48
  3238  06F5  00A0               	movwf	??_CONV_AS
  3239  06F6  0820               	movf	??_CONV_AS,w
  3240  06F7  00BD               	movwf	_cont_3AS
  3241                           
  3242                           ;master.c: 212:     TEM_UAS=(TEM_U+0X30);
  3243  06F8  0845               	movf	_TEM_U,w
  3244  06F9  3E30               	addlw	48
  3245  06FA  00A0               	movwf	??_CONV_AS
  3246  06FB  0820               	movf	??_CONV_AS,w
  3247  06FC  00F4               	movwf	_TEM_UAS
  3248                           
  3249                           ;master.c: 213:     TEM_TAS=(TEM_T+0X30);
  3250  06FD  0844               	movf	_TEM_T,w
  3251  06FE  3E30               	addlw	48
  3252  06FF  00A0               	movwf	??_CONV_AS
  3253  0700  0820               	movf	??_CONV_AS,w
  3254  0701  00F3               	movwf	_TEM_TAS
  3255                           
  3256                           ;master.c: 214:     TEM_HAS=(TEM_H+0X30);
  3257  0702  0843               	movf	_TEM_H,w
  3258  0703  3E30               	addlw	48
  3259  0704  00A0               	movwf	??_CONV_AS
  3260  0705  0820               	movf	??_CONV_AS,w
  3261  0706  00F2               	movwf	_TEM_HAS
  3262  0707                     l162:
  3263  0707  0008               	return
  3264  0708                     __end_of_CONV_AS:
  3265                           
  3266                           	psect	text17
  3267  0603                     __ptext17:	
  3268 ;; *************** function _CONVET_cont *****************
  3269 ;; Defined at:
  3270 ;;		line 200 in file "master.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;		None
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;		None
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  1    wreg      void 
  3277 ;; Registers used:
  3278 ;;		wreg, status,2, status,0, pclath, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3284 ;;      Params:         0       0       0       0       0
  3285 ;;      Locals:         0       0       0       0       0
  3286 ;;      Temps:          0       4       0       0       0
  3287 ;;      Totals:         0       4       0       0       0
  3288 ;;Total ram usage:        4 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    3
  3291 ;; This function calls:
  3292 ;;		___awdiv
  3293 ;;		___bmul
  3294 ;;		___wmul
  3295 ;; This function is called by:
  3296 ;;		_main
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           
  3301                           ;psect for function _CONVET_cont
  3302  0603                     _CONVET_cont:
  3303  0603                     l2052:	
  3304                           ;incstack = 0
  3305                           ; Regs used in _CONVET_cont: [wreg+status,2+status,0+pclath+cstack]
  3306                           
  3307                           
  3308                           ;master.c: 201:     cont_1=(cont/100);
  3309  0603  3064               	movlw	100
  3310  0604  1283               	bcf	3,5	;RP0=0, select bank0
  3311  0605  1303               	bcf	3,6	;RP1=0, select bank0
  3312  0606  00A6               	movwf	___awdiv@divisor
  3313  0607  3000               	movlw	0
  3314  0608  00A7               	movwf	___awdiv@divisor+1
  3315  0609  083F               	movf	_cont,w
  3316  060A  00AF               	movwf	??_CONVET_cont
  3317  060B  01B0               	clrf	??_CONVET_cont+1
  3318  060C  082F               	movf	??_CONVET_cont,w
  3319  060D  00A8               	movwf	___awdiv@dividend
  3320  060E  0830               	movf	??_CONVET_cont+1,w
  3321  060F  00A9               	movwf	___awdiv@dividend+1
  3322  0610  120A  118A  253A  120A  118A  	fcall	___awdiv
  3323  0615  1283               	bcf	3,5	;RP0=0, select bank0
  3324  0616  1303               	bcf	3,6	;RP1=0, select bank0
  3325  0617  0826               	movf	?___awdiv,w
  3326  0618  00B1               	movwf	??_CONVET_cont+2
  3327  0619  0831               	movf	??_CONVET_cont+2,w
  3328  061A  00C2               	movwf	_cont_1
  3329                           
  3330                           ;master.c: 202:     cont_2=((cont)-(cont_1*100))/10;
  3331  061B  300A               	movlw	10
  3332  061C  00A6               	movwf	___awdiv@divisor
  3333  061D  3000               	movlw	0
  3334  061E  00A7               	movwf	___awdiv@divisor+1
  3335  061F  0842               	movf	_cont_1,w
  3336  0620  00AF               	movwf	??_CONVET_cont
  3337  0621  01B0               	clrf	??_CONVET_cont+1
  3338  0622  082F               	movf	??_CONVET_cont,w
  3339  0623  00A0               	movwf	___wmul@multiplier
  3340  0624  0830               	movf	??_CONVET_cont+1,w
  3341  0625  00A1               	movwf	___wmul@multiplier+1
  3342  0626  309C               	movlw	156
  3343  0627  00A2               	movwf	___wmul@multiplicand
  3344  0628  30FF               	movlw	255
  3345  0629  00A3               	movwf	___wmul@multiplicand+1
  3346  062A  120A  118A  2761  120A  118A  	fcall	___wmul
  3347  062F  1283               	bcf	3,5	;RP0=0, select bank0
  3348  0630  1303               	bcf	3,6	;RP1=0, select bank0
  3349  0631  083F               	movf	_cont,w
  3350  0632  0720               	addwf	?___wmul,w
  3351  0633  00A8               	movwf	___awdiv@dividend
  3352  0634  0821               	movf	?___wmul+1,w
  3353  0635  1803               	skipnc
  3354  0636  0A21               	incf	?___wmul+1,w
  3355  0637  00A9               	movwf	___awdiv@dividend+1
  3356  0638  120A  118A  253A  120A  118A  	fcall	___awdiv
  3357  063D  1283               	bcf	3,5	;RP0=0, select bank0
  3358  063E  1303               	bcf	3,6	;RP1=0, select bank0
  3359  063F  0826               	movf	?___awdiv,w
  3360  0640  00B1               	movwf	??_CONVET_cont+2
  3361  0641  0831               	movf	??_CONVET_cont+2,w
  3362  0642  00C1               	movwf	_cont_2
  3363                           
  3364                           ;master.c: 203:     cont_3=((cont)-(cont_1*100)-(cont_2*10));
  3365  0643  309C               	movlw	156
  3366  0644  00AF               	movwf	??_CONVET_cont
  3367  0645  082F               	movf	??_CONVET_cont,w
  3368  0646  00A0               	movwf	___bmul@multiplicand
  3369  0647  0842               	movf	_cont_1,w
  3370  0648  120A  158A  27E9  120A  118A  	fcall	___bmul
  3371  064D  1283               	bcf	3,5	;RP0=0, select bank0
  3372  064E  1303               	bcf	3,6	;RP1=0, select bank0
  3373  064F  00B0               	movwf	??_CONVET_cont+1
  3374  0650  30F6               	movlw	246
  3375  0651  00B1               	movwf	??_CONVET_cont+2
  3376  0652  0831               	movf	??_CONVET_cont+2,w
  3377  0653  00A0               	movwf	___bmul@multiplicand
  3378  0654  0841               	movf	_cont_2,w
  3379  0655  120A  158A  27E9  120A  118A  	fcall	___bmul
  3380  065A  1283               	bcf	3,5	;RP0=0, select bank0
  3381  065B  1303               	bcf	3,6	;RP1=0, select bank0
  3382  065C  0730               	addwf	??_CONVET_cont+1,w
  3383  065D  073F               	addwf	_cont,w
  3384  065E  00B2               	movwf	??_CONVET_cont+3
  3385  065F  0832               	movf	??_CONVET_cont+3,w
  3386  0660  00C0               	movwf	_cont_3
  3387  0661                     l159:
  3388  0661  0008               	return
  3389  0662                     __end_of_CONVET_cont:
  3390                           
  3391                           	psect	text18
  3392  048C                     __ptext18:	
  3393 ;; *************** function _CONV *****************
  3394 ;; Defined at:
  3395 ;;		line 175 in file "master.c"
  3396 ;; Parameters:    Size  Location     Type
  3397 ;;		None
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;		None
  3400 ;; Return value:  Size  Location     Type
  3401 ;;                  1    wreg      void 
  3402 ;; Registers used:
  3403 ;;		wreg, status,2, status,0, pclath, cstack
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3409 ;;      Params:         0       0       0       0       0
  3410 ;;      Locals:         0       2       0       0       0
  3411 ;;      Temps:          0       8       0       0       0
  3412 ;;      Totals:         0      10       0       0       0
  3413 ;;Total ram usage:       10 bytes
  3414 ;; Hardware stack levels used:    1
  3415 ;; Hardware stack levels required when called:    3
  3416 ;; This function calls:
  3417 ;;		___awdiv
  3418 ;;		___bmul
  3419 ;;		___wmul
  3420 ;; This function is called by:
  3421 ;;		_main
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425                           
  3426                           ;psect for function _CONV
  3427  048C                     _CONV:
  3428  048C                     l2108:	
  3429                           ;incstack = 0
  3430                           ; Regs used in _CONV: [wreg+status,2+status,0+pclath+cstack]
  3431                           
  3432                           
  3433                           ;master.c: 177:     POT1_U=(L/51);
  3434  048C  3033               	movlw	51
  3435  048D  1283               	bcf	3,5	;RP0=0, select bank0
  3436  048E  1303               	bcf	3,6	;RP1=0, select bank0
  3437  048F  00A6               	movwf	___awdiv@divisor
  3438  0490  3000               	movlw	0
  3439  0491  00A7               	movwf	___awdiv@divisor+1
  3440  0492  0850               	movf	_L,w
  3441  0493  00AF               	movwf	??_CONV
  3442  0494  01B0               	clrf	??_CONV+1
  3443  0495  082F               	movf	??_CONV,w
  3444  0496  00A8               	movwf	___awdiv@dividend
  3445  0497  0830               	movf	??_CONV+1,w
  3446  0498  00A9               	movwf	___awdiv@dividend+1
  3447  0499  120A  118A  253A  120A  118A  	fcall	___awdiv
  3448  049E  1283               	bcf	3,5	;RP0=0, select bank0
  3449  049F  1303               	bcf	3,6	;RP1=0, select bank0
  3450  04A0  0826               	movf	?___awdiv,w
  3451  04A1  00B1               	movwf	??_CONV+2
  3452  04A2  0831               	movf	??_CONV+2,w
  3453  04A3  00C8               	movwf	_POT1_U
  3454                           
  3455                           ;master.c: 178:     POT1_T=((L*100/51)-(POT1_U*100))/10;
  3456  04A4  3033               	movlw	51
  3457  04A5  00A6               	movwf	___awdiv@divisor
  3458  04A6  3000               	movlw	0
  3459  04A7  00A7               	movwf	___awdiv@divisor+1
  3460  04A8  0850               	movf	_L,w
  3461  04A9  00AF               	movwf	??_CONV
  3462  04AA  01B0               	clrf	??_CONV+1
  3463  04AB  082F               	movf	??_CONV,w
  3464  04AC  00A0               	movwf	___wmul@multiplier
  3465  04AD  0830               	movf	??_CONV+1,w
  3466  04AE  00A1               	movwf	___wmul@multiplier+1
  3467  04AF  3064               	movlw	100
  3468  04B0  00A2               	movwf	___wmul@multiplicand
  3469  04B1  3000               	movlw	0
  3470  04B2  00A3               	movwf	___wmul@multiplicand+1
  3471  04B3  120A  118A  2761  120A  118A  	fcall	___wmul
  3472  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  3473  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  3474  04BA  0821               	movf	?___wmul+1,w
  3475  04BB  00A9               	movwf	___awdiv@dividend+1
  3476  04BC  0820               	movf	?___wmul,w
  3477  04BD  00A8               	movwf	___awdiv@dividend
  3478  04BE  120A  118A  253A  120A  118A  	fcall	___awdiv
  3479  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  3480  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  3481  04C5  0826               	movf	?___awdiv,w
  3482  04C6  00B1               	movwf	??_CONV+2
  3483  04C7  0827               	movf	?___awdiv+1,w
  3484  04C8  00B2               	movwf	??_CONV+3
  3485  04C9  0848               	movf	_POT1_U,w
  3486  04CA  00B3               	movwf	??_CONV+4
  3487  04CB  01B4               	clrf	??_CONV+5
  3488  04CC  0833               	movf	??_CONV+4,w
  3489  04CD  00A0               	movwf	___wmul@multiplier
  3490  04CE  0834               	movf	??_CONV+5,w
  3491  04CF  00A1               	movwf	___wmul@multiplier+1
  3492  04D0  309C               	movlw	156
  3493  04D1  00A2               	movwf	___wmul@multiplicand
  3494  04D2  30FF               	movlw	255
  3495  04D3  00A3               	movwf	___wmul@multiplicand+1
  3496  04D4  120A  118A  2761  120A  118A  	fcall	___wmul
  3497  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  3498  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  3499  04DB  0820               	movf	?___wmul,w
  3500  04DC  0731               	addwf	??_CONV+2,w
  3501  04DD  00B7               	movwf	_CONV$1331
  3502  04DE  0821               	movf	?___wmul+1,w
  3503  04DF  1803               	skipnc
  3504  04E0  0A21               	incf	?___wmul+1,w
  3505  04E1  0732               	addwf	??_CONV+3,w
  3506  04E2  00B8               	movwf	_CONV$1331+1
  3507                           
  3508                           ;master.c: 178:     POT1_T=((L*100/51)-(POT1_U*100))/10;
  3509  04E3  300A               	movlw	10
  3510  04E4  00A6               	movwf	___awdiv@divisor
  3511  04E5  3000               	movlw	0
  3512  04E6  00A7               	movwf	___awdiv@divisor+1
  3513  04E7  0838               	movf	_CONV$1331+1,w
  3514  04E8  00A9               	movwf	___awdiv@dividend+1
  3515  04E9  0837               	movf	_CONV$1331,w
  3516  04EA  00A8               	movwf	___awdiv@dividend
  3517  04EB  120A  118A  253A  120A  118A  	fcall	___awdiv
  3518  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  3519  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  3520  04F2  0826               	movf	?___awdiv,w
  3521  04F3  00AF               	movwf	??_CONV
  3522  04F4  082F               	movf	??_CONV,w
  3523  04F5  00C6               	movwf	_POT1_T
  3524                           
  3525                           ;master.c: 179:     POT1_H=((L*100/51)-(POT1_U*100)-(POT1_T*10));
  3526  04F6  3033               	movlw	51
  3527  04F7  00A6               	movwf	___awdiv@divisor
  3528  04F8  3000               	movlw	0
  3529  04F9  00A7               	movwf	___awdiv@divisor+1
  3530  04FA  0850               	movf	_L,w
  3531  04FB  00AF               	movwf	??_CONV
  3532  04FC  01B0               	clrf	??_CONV+1
  3533  04FD  082F               	movf	??_CONV,w
  3534  04FE  00A0               	movwf	___wmul@multiplier
  3535  04FF  0830               	movf	??_CONV+1,w
  3536  0500  00A1               	movwf	___wmul@multiplier+1
  3537  0501  3064               	movlw	100
  3538  0502  00A2               	movwf	___wmul@multiplicand
  3539  0503  3000               	movlw	0
  3540  0504  00A3               	movwf	___wmul@multiplicand+1
  3541  0505  120A  118A  2761  120A  118A  	fcall	___wmul
  3542  050A  1283               	bcf	3,5	;RP0=0, select bank0
  3543  050B  1303               	bcf	3,6	;RP1=0, select bank0
  3544  050C  0821               	movf	?___wmul+1,w
  3545  050D  00A9               	movwf	___awdiv@dividend+1
  3546  050E  0820               	movf	?___wmul,w
  3547  050F  00A8               	movwf	___awdiv@dividend
  3548  0510  120A  118A  253A  120A  118A  	fcall	___awdiv
  3549  0515  1283               	bcf	3,5	;RP0=0, select bank0
  3550  0516  1303               	bcf	3,6	;RP1=0, select bank0
  3551  0517  0826               	movf	?___awdiv,w
  3552  0518  00B1               	movwf	??_CONV+2
  3553  0519  0827               	movf	?___awdiv+1,w
  3554  051A  00B2               	movwf	??_CONV+3
  3555  051B  309C               	movlw	156
  3556  051C  00B3               	movwf	??_CONV+4
  3557  051D  0833               	movf	??_CONV+4,w
  3558  051E  00A0               	movwf	___bmul@multiplicand
  3559  051F  0848               	movf	_POT1_U,w
  3560  0520  120A  158A  27E9  120A  118A  	fcall	___bmul
  3561  0525  1283               	bcf	3,5	;RP0=0, select bank0
  3562  0526  1303               	bcf	3,6	;RP1=0, select bank0
  3563  0527  00B4               	movwf	??_CONV+5
  3564  0528  30F6               	movlw	246
  3565  0529  00B5               	movwf	??_CONV+6
  3566  052A  0835               	movf	??_CONV+6,w
  3567  052B  00A0               	movwf	___bmul@multiplicand
  3568  052C  0846               	movf	_POT1_T,w
  3569  052D  120A  158A  27E9  120A  118A  	fcall	___bmul
  3570  0532  1283               	bcf	3,5	;RP0=0, select bank0
  3571  0533  1303               	bcf	3,6	;RP1=0, select bank0
  3572  0534  0734               	addwf	??_CONV+5,w
  3573  0535  0731               	addwf	??_CONV+2,w
  3574  0536  00B6               	movwf	??_CONV+7
  3575  0537  0836               	movf	??_CONV+7,w
  3576  0538  00C7               	movwf	_POT1_H
  3577  0539                     l151:
  3578  0539  0008               	return
  3579  053A                     __end_of_CONV:
  3580                           
  3581                           	psect	text19
  3582  036C                     __ptext19:	
  3583 ;; *************** function _CONT *****************
  3584 ;; Defined at:
  3585 ;;		line 181 in file "master.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;		None
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;		None
  3590 ;; Return value:  Size  Location     Type
  3591 ;;                  1    wreg      void 
  3592 ;; Registers used:
  3593 ;;		wreg, status,2, status,0, pclath, cstack
  3594 ;; Tracked objects:
  3595 ;;		On entry : 0/0
  3596 ;;		On exit  : 0/0
  3597 ;;		Unchanged: 0/0
  3598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3599 ;;      Params:         0       0       0       0       0
  3600 ;;      Locals:         0       0       0       0       0
  3601 ;;      Temps:          0       4       0       0       0
  3602 ;;      Totals:         0       4       0       0       0
  3603 ;;Total ram usage:        4 bytes
  3604 ;; Hardware stack levels used:    1
  3605 ;; Hardware stack levels required when called:    3
  3606 ;; This function calls:
  3607 ;;		___awdiv
  3608 ;;		___bmul
  3609 ;;		___wmul
  3610 ;; This function is called by:
  3611 ;;		_main
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           
  3616                           ;psect for function _CONT
  3617  036C                     _CONT:
  3618  036C                     l2110:	
  3619                           ;incstack = 0
  3620                           ; Regs used in _CONT: [wreg+status,2+status,0+pclath+cstack]
  3621                           
  3622                           
  3623                           ;master.c: 182:     R=C;
  3624  036C  1283               	bcf	3,5	;RP0=0, select bank0
  3625  036D  1303               	bcf	3,6	;RP1=0, select bank0
  3626  036E  084C               	movf	_C,w
  3627  036F  00AF               	movwf	??_CONT
  3628  0370  082F               	movf	??_CONT,w
  3629  0371  00CF               	movwf	_R
  3630                           
  3631                           ;master.c: 183:     if (R>=26){
  3632  0372  301A               	movlw	26
  3633  0373  024F               	subwf	_R,w
  3634  0374  1C03               	skipc
  3635  0375  2B77               	goto	u561
  3636  0376  2B78               	goto	u560
  3637  0377                     u561:
  3638  0377  2C02               	goto	l2118
  3639  0378                     u560:
  3640  0378                     l2112:
  3641                           
  3642                           ;master.c: 184:         c =(((R-26)*150)/77);
  3643  0378  304D               	movlw	77
  3644  0379  00A6               	movwf	___awdiv@divisor
  3645  037A  3000               	movlw	0
  3646  037B  00A7               	movwf	___awdiv@divisor+1
  3647  037C  084F               	movf	_R,w
  3648  037D  3EE6               	addlw	230
  3649  037E  00A0               	movwf	___wmul@multiplier
  3650  037F  30FF               	movlw	255
  3651  0380  1803               	skipnc
  3652  0381  3000               	movlw	0
  3653  0382  00A1               	movwf	___wmul@multiplier+1
  3654  0383  3096               	movlw	150
  3655  0384  00A2               	movwf	___wmul@multiplicand
  3656  0385  3000               	movlw	0
  3657  0386  00A3               	movwf	___wmul@multiplicand+1
  3658  0387  120A  118A  2761  120A  118A  	fcall	___wmul
  3659  038C  1283               	bcf	3,5	;RP0=0, select bank0
  3660  038D  1303               	bcf	3,6	;RP1=0, select bank0
  3661  038E  0821               	movf	?___wmul+1,w
  3662  038F  00A9               	movwf	___awdiv@dividend+1
  3663  0390  0820               	movf	?___wmul,w
  3664  0391  00A8               	movwf	___awdiv@dividend
  3665  0392  120A  118A  253A  120A  118A  	fcall	___awdiv
  3666  0397  1283               	bcf	3,5	;RP0=0, select bank0
  3667  0398  1303               	bcf	3,6	;RP1=0, select bank0
  3668  0399  0826               	movf	?___awdiv,w
  3669  039A  00AF               	movwf	??_CONT
  3670  039B  082F               	movf	??_CONT,w
  3671  039C  00CB               	movwf	_c
  3672                           
  3673                           ;master.c: 185:         TEM_U=(c/100);
  3674  039D  3064               	movlw	100
  3675  039E  00A6               	movwf	___awdiv@divisor
  3676  039F  3000               	movlw	0
  3677  03A0  00A7               	movwf	___awdiv@divisor+1
  3678  03A1  084B               	movf	_c,w
  3679  03A2  00AF               	movwf	??_CONT
  3680  03A3  01B0               	clrf	??_CONT+1
  3681  03A4  082F               	movf	??_CONT,w
  3682  03A5  00A8               	movwf	___awdiv@dividend
  3683  03A6  0830               	movf	??_CONT+1,w
  3684  03A7  00A9               	movwf	___awdiv@dividend+1
  3685  03A8  120A  118A  253A  120A  118A  	fcall	___awdiv
  3686  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  3687  03AE  1303               	bcf	3,6	;RP1=0, select bank0
  3688  03AF  0826               	movf	?___awdiv,w
  3689  03B0  00B1               	movwf	??_CONT+2
  3690  03B1  0831               	movf	??_CONT+2,w
  3691  03B2  00C5               	movwf	_TEM_U
  3692                           
  3693                           ;master.c: 186:         TEM_T=(c-(TEM_U*100))/10;
  3694  03B3  300A               	movlw	10
  3695  03B4  00A6               	movwf	___awdiv@divisor
  3696  03B5  3000               	movlw	0
  3697  03B6  00A7               	movwf	___awdiv@divisor+1
  3698  03B7  0845               	movf	_TEM_U,w
  3699  03B8  00AF               	movwf	??_CONT
  3700  03B9  01B0               	clrf	??_CONT+1
  3701  03BA  082F               	movf	??_CONT,w
  3702  03BB  00A0               	movwf	___wmul@multiplier
  3703  03BC  0830               	movf	??_CONT+1,w
  3704  03BD  00A1               	movwf	___wmul@multiplier+1
  3705  03BE  309C               	movlw	156
  3706  03BF  00A2               	movwf	___wmul@multiplicand
  3707  03C0  30FF               	movlw	255
  3708  03C1  00A3               	movwf	___wmul@multiplicand+1
  3709  03C2  120A  118A  2761  120A  118A  	fcall	___wmul
  3710  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  3711  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  3712  03C9  084B               	movf	_c,w
  3713  03CA  0720               	addwf	?___wmul,w
  3714  03CB  00A8               	movwf	___awdiv@dividend
  3715  03CC  0821               	movf	?___wmul+1,w
  3716  03CD  1803               	skipnc
  3717  03CE  0A21               	incf	?___wmul+1,w
  3718  03CF  00A9               	movwf	___awdiv@dividend+1
  3719  03D0  120A  118A  253A  120A  118A  	fcall	___awdiv
  3720  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  3721  03D6  1303               	bcf	3,6	;RP1=0, select bank0
  3722  03D7  0826               	movf	?___awdiv,w
  3723  03D8  00B1               	movwf	??_CONT+2
  3724  03D9  0831               	movf	??_CONT+2,w
  3725  03DA  00C4               	movwf	_TEM_T
  3726                           
  3727                           ;master.c: 187:         TEM_H=(c-(TEM_U*100)-(TEM_T*10));
  3728  03DB  309C               	movlw	156
  3729  03DC  00AF               	movwf	??_CONT
  3730  03DD  082F               	movf	??_CONT,w
  3731  03DE  00A0               	movwf	___bmul@multiplicand
  3732  03DF  0845               	movf	_TEM_U,w
  3733  03E0  120A  158A  27E9  120A  118A  	fcall	___bmul
  3734  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  3735  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  3736  03E7  00B0               	movwf	??_CONT+1
  3737  03E8  30F6               	movlw	246
  3738  03E9  00B1               	movwf	??_CONT+2
  3739  03EA  0831               	movf	??_CONT+2,w
  3740  03EB  00A0               	movwf	___bmul@multiplicand
  3741  03EC  0844               	movf	_TEM_T,w
  3742  03ED  120A  158A  27E9  120A  118A  	fcall	___bmul
  3743  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  3744  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  3745  03F4  0730               	addwf	??_CONT+1,w
  3746  03F5  074B               	addwf	_c,w
  3747  03F6  00B2               	movwf	??_CONT+3
  3748  03F7  0832               	movf	??_CONT+3,w
  3749  03F8  00C3               	movwf	_TEM_H
  3750  03F9                     l2114:
  3751                           
  3752                           ;master.c: 188:         sign=0x20;
  3753  03F9  3020               	movlw	32
  3754  03FA  00AF               	movwf	??_CONT
  3755  03FB  082F               	movf	??_CONT,w
  3756  03FC  00CA               	movwf	_sign
  3757  03FD                     l2116:
  3758                           
  3759                           ;master.c: 189:         bro=20;
  3760  03FD  3014               	movlw	20
  3761  03FE  00AF               	movwf	??_CONT
  3762  03FF  082F               	movf	??_CONT,w
  3763  0400  00C9               	movwf	_bro
  3764                           
  3765                           ;master.c: 190:     }
  3766  0401  2C8B               	goto	l156
  3767  0402                     l2118:
  3768                           
  3769                           ;master.c: 192:         c=-((c-26)*55)/27;
  3770  0402  30E5               	movlw	229
  3771  0403  00A6               	movwf	___awdiv@divisor
  3772  0404  30FF               	movlw	255
  3773  0405  00A7               	movwf	___awdiv@divisor+1
  3774  0406  084B               	movf	_c,w
  3775  0407  3EE6               	addlw	230
  3776  0408  00A0               	movwf	___wmul@multiplier
  3777  0409  30FF               	movlw	255
  3778  040A  1803               	skipnc
  3779  040B  3000               	movlw	0
  3780  040C  00A1               	movwf	___wmul@multiplier+1
  3781  040D  3037               	movlw	55
  3782  040E  00A2               	movwf	___wmul@multiplicand
  3783  040F  3000               	movlw	0
  3784  0410  00A3               	movwf	___wmul@multiplicand+1
  3785  0411  120A  118A  2761  120A  118A  	fcall	___wmul
  3786  0416  1283               	bcf	3,5	;RP0=0, select bank0
  3787  0417  1303               	bcf	3,6	;RP1=0, select bank0
  3788  0418  0821               	movf	?___wmul+1,w
  3789  0419  00A9               	movwf	___awdiv@dividend+1
  3790  041A  0820               	movf	?___wmul,w
  3791  041B  00A8               	movwf	___awdiv@dividend
  3792  041C  120A  118A  253A  120A  118A  	fcall	___awdiv
  3793  0421  1283               	bcf	3,5	;RP0=0, select bank0
  3794  0422  1303               	bcf	3,6	;RP1=0, select bank0
  3795  0423  0826               	movf	?___awdiv,w
  3796  0424  00AF               	movwf	??_CONT
  3797  0425  082F               	movf	??_CONT,w
  3798  0426  00CB               	movwf	_c
  3799                           
  3800                           ;master.c: 193:         TEM_U=(c/100);
  3801  0427  3064               	movlw	100
  3802  0428  00A6               	movwf	___awdiv@divisor
  3803  0429  3000               	movlw	0
  3804  042A  00A7               	movwf	___awdiv@divisor+1
  3805  042B  084B               	movf	_c,w
  3806  042C  00AF               	movwf	??_CONT
  3807  042D  01B0               	clrf	??_CONT+1
  3808  042E  082F               	movf	??_CONT,w
  3809  042F  00A8               	movwf	___awdiv@dividend
  3810  0430  0830               	movf	??_CONT+1,w
  3811  0431  00A9               	movwf	___awdiv@dividend+1
  3812  0432  120A  118A  253A  120A  118A  	fcall	___awdiv
  3813  0437  1283               	bcf	3,5	;RP0=0, select bank0
  3814  0438  1303               	bcf	3,6	;RP1=0, select bank0
  3815  0439  0826               	movf	?___awdiv,w
  3816  043A  00B1               	movwf	??_CONT+2
  3817  043B  0831               	movf	??_CONT+2,w
  3818  043C  00C5               	movwf	_TEM_U
  3819                           
  3820                           ;master.c: 194:         TEM_T=(c-(TEM_U*100))/10;
  3821  043D  300A               	movlw	10
  3822  043E  00A6               	movwf	___awdiv@divisor
  3823  043F  3000               	movlw	0
  3824  0440  00A7               	movwf	___awdiv@divisor+1
  3825  0441  0845               	movf	_TEM_U,w
  3826  0442  00AF               	movwf	??_CONT
  3827  0443  01B0               	clrf	??_CONT+1
  3828  0444  082F               	movf	??_CONT,w
  3829  0445  00A0               	movwf	___wmul@multiplier
  3830  0446  0830               	movf	??_CONT+1,w
  3831  0447  00A1               	movwf	___wmul@multiplier+1
  3832  0448  309C               	movlw	156
  3833  0449  00A2               	movwf	___wmul@multiplicand
  3834  044A  30FF               	movlw	255
  3835  044B  00A3               	movwf	___wmul@multiplicand+1
  3836  044C  120A  118A  2761  120A  118A  	fcall	___wmul
  3837  0451  1283               	bcf	3,5	;RP0=0, select bank0
  3838  0452  1303               	bcf	3,6	;RP1=0, select bank0
  3839  0453  084B               	movf	_c,w
  3840  0454  0720               	addwf	?___wmul,w
  3841  0455  00A8               	movwf	___awdiv@dividend
  3842  0456  0821               	movf	?___wmul+1,w
  3843  0457  1803               	skipnc
  3844  0458  0A21               	incf	?___wmul+1,w
  3845  0459  00A9               	movwf	___awdiv@dividend+1
  3846  045A  120A  118A  253A  120A  118A  	fcall	___awdiv
  3847  045F  1283               	bcf	3,5	;RP0=0, select bank0
  3848  0460  1303               	bcf	3,6	;RP1=0, select bank0
  3849  0461  0826               	movf	?___awdiv,w
  3850  0462  00B1               	movwf	??_CONT+2
  3851  0463  0831               	movf	??_CONT+2,w
  3852  0464  00C4               	movwf	_TEM_T
  3853                           
  3854                           ;master.c: 195:         TEM_H=(c-(TEM_U*100)-(TEM_T*10));
  3855  0465  309C               	movlw	156
  3856  0466  00AF               	movwf	??_CONT
  3857  0467  082F               	movf	??_CONT,w
  3858  0468  00A0               	movwf	___bmul@multiplicand
  3859  0469  0845               	movf	_TEM_U,w
  3860  046A  120A  158A  27E9  120A  118A  	fcall	___bmul
  3861  046F  1283               	bcf	3,5	;RP0=0, select bank0
  3862  0470  1303               	bcf	3,6	;RP1=0, select bank0
  3863  0471  00B0               	movwf	??_CONT+1
  3864  0472  30F6               	movlw	246
  3865  0473  00B1               	movwf	??_CONT+2
  3866  0474  0831               	movf	??_CONT+2,w
  3867  0475  00A0               	movwf	___bmul@multiplicand
  3868  0476  0844               	movf	_TEM_T,w
  3869  0477  120A  158A  27E9  120A  118A  	fcall	___bmul
  3870  047C  1283               	bcf	3,5	;RP0=0, select bank0
  3871  047D  1303               	bcf	3,6	;RP1=0, select bank0
  3872  047E  0730               	addwf	??_CONT+1,w
  3873  047F  074B               	addwf	_c,w
  3874  0480  00B2               	movwf	??_CONT+3
  3875  0481  0832               	movf	??_CONT+3,w
  3876  0482  00C3               	movwf	_TEM_H
  3877  0483                     l2120:
  3878                           
  3879                           ;master.c: 196:         sign=0x2D;
  3880  0483  302D               	movlw	45
  3881  0484  00AF               	movwf	??_CONT
  3882  0485  082F               	movf	??_CONT,w
  3883  0486  00CA               	movwf	_sign
  3884  0487                     l2122:
  3885                           
  3886                           ;master.c: 197:         bro=18;
  3887  0487  3012               	movlw	18
  3888  0488  00AF               	movwf	??_CONT
  3889  0489  082F               	movf	??_CONT,w
  3890  048A  00C9               	movwf	_bro
  3891  048B                     l156:
  3892  048B  0008               	return
  3893  048C                     __end_of_CONT:
  3894                           
  3895                           	psect	text20
  3896  0761                     __ptext20:	
  3897 ;; *************** function ___wmul *****************
  3898 ;; Defined at:
  3899 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3902 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;  product         2    4[BANK0 ] unsigned int 
  3905 ;; Return value:  Size  Location     Type
  3906 ;;                  2    0[BANK0 ] unsigned int 
  3907 ;; Registers used:
  3908 ;;		wreg, status,2, status,0
  3909 ;; Tracked objects:
  3910 ;;		On entry : 0/0
  3911 ;;		On exit  : 0/0
  3912 ;;		Unchanged: 0/0
  3913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3914 ;;      Params:         0       4       0       0       0
  3915 ;;      Locals:         0       2       0       0       0
  3916 ;;      Temps:          0       0       0       0       0
  3917 ;;      Totals:         0       6       0       0       0
  3918 ;;Total ram usage:        6 bytes
  3919 ;; Hardware stack levels used:    1
  3920 ;; Hardware stack levels required when called:    2
  3921 ;; This function calls:
  3922 ;;		Nothing
  3923 ;; This function is called by:
  3924 ;;		_CONV
  3925 ;;		_CONT
  3926 ;;		_CONVET_cont
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           
  3931                           ;psect for function ___wmul
  3932  0761                     ___wmul:
  3933  0761                     l1944:	
  3934                           ;incstack = 0
  3935                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3936                           
  3937  0761  1283               	bcf	3,5	;RP0=0, select bank0
  3938  0762  1303               	bcf	3,6	;RP1=0, select bank0
  3939  0763  01A4               	clrf	___wmul@product
  3940  0764  01A5               	clrf	___wmul@product+1
  3941  0765                     l1946:
  3942  0765  1C20               	btfss	___wmul@multiplier,0
  3943  0766  2F68               	goto	u491
  3944  0767  2F69               	goto	u490
  3945  0768                     u491:
  3946  0768  2F6F               	goto	l406
  3947  0769                     u490:
  3948  0769                     l1948:
  3949  0769  0822               	movf	___wmul@multiplicand,w
  3950  076A  07A4               	addwf	___wmul@product,f
  3951  076B  1803               	skipnc
  3952  076C  0AA5               	incf	___wmul@product+1,f
  3953  076D  0823               	movf	___wmul@multiplicand+1,w
  3954  076E  07A5               	addwf	___wmul@product+1,f
  3955  076F                     l406:
  3956  076F  3001               	movlw	1
  3957  0770                     u505:
  3958  0770  1003               	clrc
  3959  0771  0DA2               	rlf	___wmul@multiplicand,f
  3960  0772  0DA3               	rlf	___wmul@multiplicand+1,f
  3961  0773  3EFF               	addlw	-1
  3962  0774  1D03               	skipz
  3963  0775  2F70               	goto	u505
  3964  0776                     l1950:
  3965  0776  3001               	movlw	1
  3966  0777                     u515:
  3967  0777  1003               	clrc
  3968  0778  0CA1               	rrf	___wmul@multiplier+1,f
  3969  0779  0CA0               	rrf	___wmul@multiplier,f
  3970  077A  3EFF               	addlw	-1
  3971  077B  1D03               	skipz
  3972  077C  2F77               	goto	u515
  3973  077D                     l1952:
  3974  077D  0820               	movf	___wmul@multiplier,w
  3975  077E  0421               	iorwf	___wmul@multiplier+1,w
  3976  077F  1D03               	btfss	3,2
  3977  0780  2F82               	goto	u521
  3978  0781  2F83               	goto	u520
  3979  0782                     u521:
  3980  0782  2F65               	goto	l1946
  3981  0783                     u520:
  3982  0783                     l1954:
  3983  0783  0825               	movf	___wmul@product+1,w
  3984  0784  00A1               	movwf	?___wmul+1
  3985  0785  0824               	movf	___wmul@product,w
  3986  0786  00A0               	movwf	?___wmul
  3987  0787                     l408:
  3988  0787  0008               	return
  3989  0788                     __end_of___wmul:
  3990                           
  3991                           	psect	text21
  3992  0FE9                     __ptext21:	
  3993 ;; *************** function ___bmul *****************
  3994 ;; Defined at:
  3995 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul8.c"
  3996 ;; Parameters:    Size  Location     Type
  3997 ;;  multiplier      1    wreg     unsigned char 
  3998 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3999 ;; Auto vars:     Size  Location     Type
  4000 ;;  multiplier      1    3[BANK0 ] unsigned char 
  4001 ;;  product         1    2[BANK0 ] unsigned char 
  4002 ;; Return value:  Size  Location     Type
  4003 ;;                  1    wreg      unsigned char 
  4004 ;; Registers used:
  4005 ;;		wreg, status,2, status,0
  4006 ;; Tracked objects:
  4007 ;;		On entry : 0/0
  4008 ;;		On exit  : 0/0
  4009 ;;		Unchanged: 0/0
  4010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4011 ;;      Params:         0       1       0       0       0
  4012 ;;      Locals:         0       2       0       0       0
  4013 ;;      Temps:          0       1       0       0       0
  4014 ;;      Totals:         0       4       0       0       0
  4015 ;;Total ram usage:        4 bytes
  4016 ;; Hardware stack levels used:    1
  4017 ;; Hardware stack levels required when called:    2
  4018 ;; This function calls:
  4019 ;;		Nothing
  4020 ;; This function is called by:
  4021 ;;		_CONV
  4022 ;;		_CONT
  4023 ;;		_CONVET_cont
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           
  4028                           ;psect for function ___bmul
  4029  0FE9                     ___bmul:
  4030                           
  4031                           ;incstack = 0
  4032                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4033                           ;___bmul@multiplier stored from wreg
  4034  0FE9  1283               	bcf	3,5	;RP0=0, select bank0
  4035  0FEA  1303               	bcf	3,6	;RP1=0, select bank0
  4036  0FEB  00A3               	movwf	___bmul@multiplier
  4037  0FEC                     l1958:
  4038  0FEC  01A2               	clrf	___bmul@product
  4039  0FED                     l1960:
  4040  0FED  1C23               	btfss	___bmul@multiplier,0
  4041  0FEE  2FF0               	goto	u531
  4042  0FEF  2FF1               	goto	u530
  4043  0FF0                     u531:
  4044  0FF0  2FF5               	goto	l1964
  4045  0FF1                     u530:
  4046  0FF1                     l1962:
  4047  0FF1  0820               	movf	___bmul@multiplicand,w
  4048  0FF2  00A1               	movwf	??___bmul
  4049  0FF3  0821               	movf	??___bmul,w
  4050  0FF4  07A2               	addwf	___bmul@product,f
  4051  0FF5                     l1964:
  4052  0FF5  1003               	clrc
  4053  0FF6  0DA0               	rlf	___bmul@multiplicand,f
  4054  0FF7                     l1966:
  4055  0FF7  1003               	clrc
  4056  0FF8  0CA3               	rrf	___bmul@multiplier,f
  4057  0FF9  0823               	movf	___bmul@multiplier,w
  4058  0FFA  1D03               	btfss	3,2
  4059  0FFB  2FFD               	goto	u541
  4060  0FFC  2FFE               	goto	u540
  4061  0FFD                     u541:
  4062  0FFD  2FED               	goto	l1960
  4063  0FFE                     u540:
  4064  0FFE                     l1968:
  4065  0FFE  0822               	movf	___bmul@product,w
  4066  0FFF                     l432:
  4067  0FFF  0008               	return
  4068  1000                     __end_of___bmul:
  4069                           
  4070                           	psect	text22
  4071  053A                     __ptext22:	
  4072 ;; *************** function ___awdiv *****************
  4073 ;; Defined at:
  4074 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awdiv.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;  divisor         2    6[BANK0 ] int 
  4077 ;;  dividend        2    8[BANK0 ] int 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;  quotient        2   13[BANK0 ] int 
  4080 ;;  sign            1   12[BANK0 ] unsigned char 
  4081 ;;  counter         1   11[BANK0 ] unsigned char 
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  2    6[BANK0 ] int 
  4084 ;; Registers used:
  4085 ;;		wreg, status,2, status,0
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4091 ;;      Params:         0       4       0       0       0
  4092 ;;      Locals:         0       4       0       0       0
  4093 ;;      Temps:          0       1       0       0       0
  4094 ;;      Totals:         0       9       0       0       0
  4095 ;;Total ram usage:        9 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; Hardware stack levels required when called:    2
  4098 ;; This function calls:
  4099 ;;		Nothing
  4100 ;; This function is called by:
  4101 ;;		_CONV
  4102 ;;		_CONT
  4103 ;;		_CONVET_cont
  4104 ;; This function uses a non-reentrant model
  4105 ;;
  4106                           
  4107                           
  4108                           ;psect for function ___awdiv
  4109  053A                     ___awdiv:
  4110  053A                     l1488:	
  4111                           ;incstack = 0
  4112                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4113                           
  4114  053A  1283               	bcf	3,5	;RP0=0, select bank0
  4115  053B  1303               	bcf	3,6	;RP1=0, select bank0
  4116  053C  01AC               	clrf	___awdiv@sign
  4117  053D                     l1490:
  4118  053D  1FA7               	btfss	___awdiv@divisor+1,7
  4119  053E  2D40               	goto	u321
  4120  053F  2D41               	goto	u320
  4121  0540                     u321:
  4122  0540  2D48               	goto	l1496
  4123  0541                     u320:
  4124  0541                     l1492:
  4125  0541  09A6               	comf	___awdiv@divisor,f
  4126  0542  09A7               	comf	___awdiv@divisor+1,f
  4127  0543  0AA6               	incf	___awdiv@divisor,f
  4128  0544  1903               	skipnz
  4129  0545  0AA7               	incf	___awdiv@divisor+1,f
  4130  0546                     l1494:
  4131  0546  01AC               	clrf	___awdiv@sign
  4132  0547  0AAC               	incf	___awdiv@sign,f
  4133  0548                     l1496:
  4134  0548  1FA9               	btfss	___awdiv@dividend+1,7
  4135  0549  2D4B               	goto	u331
  4136  054A  2D4C               	goto	u330
  4137  054B                     u331:
  4138  054B  2D55               	goto	l1502
  4139  054C                     u330:
  4140  054C                     l1498:
  4141  054C  09A8               	comf	___awdiv@dividend,f
  4142  054D  09A9               	comf	___awdiv@dividend+1,f
  4143  054E  0AA8               	incf	___awdiv@dividend,f
  4144  054F  1903               	skipnz
  4145  0550  0AA9               	incf	___awdiv@dividend+1,f
  4146  0551                     l1500:
  4147  0551  3001               	movlw	1
  4148  0552  00AA               	movwf	??___awdiv
  4149  0553  082A               	movf	??___awdiv,w
  4150  0554  06AC               	xorwf	___awdiv@sign,f
  4151  0555                     l1502:
  4152  0555  01AD               	clrf	___awdiv@quotient
  4153  0556  01AE               	clrf	___awdiv@quotient+1
  4154  0557                     l1504:
  4155  0557  0826               	movf	___awdiv@divisor,w
  4156  0558  0427               	iorwf	___awdiv@divisor+1,w
  4157  0559  1903               	btfsc	3,2
  4158  055A  2D5C               	goto	u341
  4159  055B  2D5D               	goto	u340
  4160  055C                     u341:
  4161  055C  2D94               	goto	l1524
  4162  055D                     u340:
  4163  055D                     l1506:
  4164  055D  01AB               	clrf	___awdiv@counter
  4165  055E  0AAB               	incf	___awdiv@counter,f
  4166  055F  2D6B               	goto	l1512
  4167  0560                     l1508:
  4168  0560  3001               	movlw	1
  4169  0561                     u355:
  4170  0561  1003               	clrc
  4171  0562  0DA6               	rlf	___awdiv@divisor,f
  4172  0563  0DA7               	rlf	___awdiv@divisor+1,f
  4173  0564  3EFF               	addlw	-1
  4174  0565  1D03               	skipz
  4175  0566  2D61               	goto	u355
  4176  0567                     l1510:
  4177  0567  3001               	movlw	1
  4178  0568  00AA               	movwf	??___awdiv
  4179  0569  082A               	movf	??___awdiv,w
  4180  056A  07AB               	addwf	___awdiv@counter,f
  4181  056B                     l1512:
  4182  056B  1FA7               	btfss	___awdiv@divisor+1,7
  4183  056C  2D6E               	goto	u361
  4184  056D  2D6F               	goto	u360
  4185  056E                     u361:
  4186  056E  2D60               	goto	l1508
  4187  056F                     u360:
  4188  056F                     l1514:
  4189  056F  3001               	movlw	1
  4190  0570                     u375:
  4191  0570  1003               	clrc
  4192  0571  0DAD               	rlf	___awdiv@quotient,f
  4193  0572  0DAE               	rlf	___awdiv@quotient+1,f
  4194  0573  3EFF               	addlw	-1
  4195  0574  1D03               	skipz
  4196  0575  2D70               	goto	u375
  4197  0576  0827               	movf	___awdiv@divisor+1,w
  4198  0577  0229               	subwf	___awdiv@dividend+1,w
  4199  0578  1D03               	skipz
  4200  0579  2D7C               	goto	u385
  4201  057A  0826               	movf	___awdiv@divisor,w
  4202  057B  0228               	subwf	___awdiv@dividend,w
  4203  057C                     u385:
  4204  057C  1C03               	skipc
  4205  057D  2D7F               	goto	u381
  4206  057E  2D80               	goto	u380
  4207  057F                     u381:
  4208  057F  2D87               	goto	l1520
  4209  0580                     u380:
  4210  0580                     l1516:
  4211  0580  0826               	movf	___awdiv@divisor,w
  4212  0581  02A8               	subwf	___awdiv@dividend,f
  4213  0582  0827               	movf	___awdiv@divisor+1,w
  4214  0583  1C03               	skipc
  4215  0584  03A9               	decf	___awdiv@dividend+1,f
  4216  0585  02A9               	subwf	___awdiv@dividend+1,f
  4217  0586                     l1518:
  4218  0586  142D               	bsf	___awdiv@quotient,0
  4219  0587                     l1520:
  4220  0587  3001               	movlw	1
  4221  0588                     u395:
  4222  0588  1003               	clrc
  4223  0589  0CA7               	rrf	___awdiv@divisor+1,f
  4224  058A  0CA6               	rrf	___awdiv@divisor,f
  4225  058B  3EFF               	addlw	-1
  4226  058C  1D03               	skipz
  4227  058D  2D88               	goto	u395
  4228  058E                     l1522:
  4229  058E  3001               	movlw	1
  4230  058F  02AB               	subwf	___awdiv@counter,f
  4231  0590  1D03               	btfss	3,2
  4232  0591  2D93               	goto	u401
  4233  0592  2D94               	goto	u400
  4234  0593                     u401:
  4235  0593  2D6F               	goto	l1514
  4236  0594                     u400:
  4237  0594                     l1524:
  4238  0594  082C               	movf	___awdiv@sign,w
  4239  0595  1903               	btfsc	3,2
  4240  0596  2D98               	goto	u411
  4241  0597  2D99               	goto	u410
  4242  0598                     u411:
  4243  0598  2D9E               	goto	l1528
  4244  0599                     u410:
  4245  0599                     l1526:
  4246  0599  09AD               	comf	___awdiv@quotient,f
  4247  059A  09AE               	comf	___awdiv@quotient+1,f
  4248  059B  0AAD               	incf	___awdiv@quotient,f
  4249  059C  1903               	skipnz
  4250  059D  0AAE               	incf	___awdiv@quotient+1,f
  4251  059E                     l1528:
  4252  059E  082E               	movf	___awdiv@quotient+1,w
  4253  059F  00A7               	movwf	?___awdiv+1
  4254  05A0  082D               	movf	___awdiv@quotient,w
  4255  05A1  00A6               	movwf	?___awdiv
  4256  05A2                     l559:
  4257  05A2  0008               	return
  4258  05A3                     __end_of___awdiv:
  4259                           
  4260                           	psect	text23
  4261  06A7                     __ptext23:	
  4262 ;; *************** function _isr *****************
  4263 ;; Defined at:
  4264 ;;		line 52 in file "master.c"
  4265 ;; Parameters:    Size  Location     Type
  4266 ;;		None
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;		None
  4269 ;; Return value:  Size  Location     Type
  4270 ;;                  1    wreg      void 
  4271 ;; Registers used:
  4272 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4273 ;; Tracked objects:
  4274 ;;		On entry : 0/0
  4275 ;;		On exit  : 0/0
  4276 ;;		Unchanged: 0/0
  4277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4278 ;;      Params:         0       0       0       0       0
  4279 ;;      Locals:         0       0       0       0       0
  4280 ;;      Temps:          4       0       0       0       0
  4281 ;;      Totals:         4       0       0       0       0
  4282 ;;Total ram usage:        4 bytes
  4283 ;; Hardware stack levels used:    1
  4284 ;; Hardware stack levels required when called:    1
  4285 ;; This function calls:
  4286 ;;		_send
  4287 ;; This function is called by:
  4288 ;;		Interrupt level 1
  4289 ;; This function uses a non-reentrant model
  4290 ;;
  4291                           
  4292                           
  4293                           ;psect for function _isr
  4294  06A7                     _isr:
  4295  06A7                     i1l1728:
  4296                           
  4297                           ;master.c: 53:     if (PIR1bits.TXIF == 1){
  4298  06A7  1283               	bcf	3,5	;RP0=0, select bank0
  4299  06A8  1303               	bcf	3,6	;RP1=0, select bank0
  4300  06A9  1E0C               	btfss	12,4	;volatile
  4301  06AA  2EAC               	goto	u44_21
  4302  06AB  2EAD               	goto	u44_20
  4303  06AC                     u44_21:
  4304  06AC  2EB9               	goto	i1l1736
  4305  06AD                     u44_20:
  4306  06AD                     i1l1730:
  4307                           
  4308                           ;master.c: 54:         z++;
  4309  06AD  3001               	movlw	1
  4310  06AE  00F8               	movwf	??_isr
  4311  06AF  0878               	movf	??_isr,w
  4312  06B0  07CD               	addwf	_z,f
  4313  06B1                     i1l1732:
  4314                           
  4315                           ;master.c: 55:         send();
  4316  06B1  120A  118A  25A3  120A  118A  	fcall	_send
  4317  06B6                     i1l1734:
  4318                           
  4319                           ;master.c: 56:         PIE1bits.TXIE = 0;}
  4320  06B6  1683               	bsf	3,5	;RP0=1, select bank1
  4321  06B7  1303               	bcf	3,6	;RP1=0, select bank1
  4322  06B8  120C               	bcf	12,4	;volatile
  4323  06B9                     i1l1736:
  4324                           
  4325                           ;master.c: 57:     if (INTCONbits.TMR0IF==1){
  4326  06B9  1D0B               	btfss	11,2	;volatile
  4327  06BA  2EBC               	goto	u45_21
  4328  06BB  2EBD               	goto	u45_20
  4329  06BC                     u45_21:
  4330  06BC  2ECF               	goto	i1l132
  4331  06BD                     u45_20:
  4332  06BD                     i1l1738:
  4333                           
  4334                           ;master.c: 58:         TMR0=250;
  4335  06BD  30FA               	movlw	250
  4336  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  4337  06BF  0081               	movwf	1	;volatile
  4338  06C0                     i1l1740:
  4339                           
  4340                           ;master.c: 59:         INTCONbits.TMR0IF=0;
  4341  06C0  110B               	bcf	11,2	;volatile
  4342  06C1                     i1l1742:
  4343                           
  4344                           ;master.c: 60:         r++;
  4345  06C1  3001               	movlw	1
  4346  06C2  00F8               	movwf	??_isr
  4347  06C3  0878               	movf	??_isr,w
  4348  06C4  07F5               	addwf	_r,f
  4349  06C5                     i1l1744:
  4350                           
  4351                           ;master.c: 61:         if(r==100){
  4352  06C5  3064               	movlw	100
  4353  06C6  0675               	xorwf	_r,w
  4354  06C7  1D03               	btfss	3,2
  4355  06C8  2ECA               	goto	u46_21
  4356  06C9  2ECB               	goto	u46_20
  4357  06CA                     u46_21:
  4358  06CA  2ECF               	goto	i1l132
  4359  06CB                     u46_20:
  4360  06CB                     i1l1746:
  4361                           
  4362                           ;master.c: 62:             r=0;
  4363  06CB  01F5               	clrf	_r
  4364  06CC                     i1l1748:
  4365                           
  4366                           ;master.c: 63:             PIE1bits.TXIE = 1;}
  4367  06CC  1683               	bsf	3,5	;RP0=1, select bank1
  4368  06CD  1303               	bcf	3,6	;RP1=0, select bank1
  4369  06CE  160C               	bsf	12,4	;volatile
  4370  06CF                     i1l132:
  4371  06CF  087B               	movf	??_isr+3,w
  4372  06D0  008A               	movwf	10
  4373  06D1  087A               	movf	??_isr+2,w
  4374  06D2  0084               	movwf	4
  4375  06D3  0E79               	swapf	??_isr+1,w
  4376  06D4  0083               	movwf	3
  4377  06D5  0EFE               	swapf	btemp,f
  4378  06D6  0E7E               	swapf	btemp,w
  4379  06D7  0009               	retfie
  4380  06D8                     __end_of_isr:
  4381                           
  4382                           	psect	intentry
  4383  0004                     __pintentry:	
  4384                           ;incstack = 0
  4385                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4386                           
  4387  0004                     interrupt_function:
  4388  007E                     saved_w	set	btemp
  4389  0004  00FE               	movwf	btemp
  4390  0005  0E03               	swapf	3,w
  4391  0006  00F9               	movwf	??_isr+1
  4392  0007  0804               	movf	4,w
  4393  0008  00FA               	movwf	??_isr+2
  4394  0009  080A               	movf	10,w
  4395  000A  00FB               	movwf	??_isr+3
  4396  000B  120A  118A  2EA7   	ljmp	_isr
  4397                           
  4398                           	psect	text24
  4399  05A3                     __ptext24:	
  4400 ;; *************** function _send *****************
  4401 ;; Defined at:
  4402 ;;		line 216 in file "master.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;		None
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;		None
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  1    wreg      void 
  4409 ;; Registers used:
  4410 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4416 ;;      Params:         0       0       0       0       0
  4417 ;;      Locals:         0       0       0       0       0
  4418 ;;      Temps:          2       0       0       0       0
  4419 ;;      Totals:         2       0       0       0       0
  4420 ;;Total ram usage:        2 bytes
  4421 ;; Hardware stack levels used:    1
  4422 ;; This function calls:
  4423 ;;		Nothing
  4424 ;; This function is called by:
  4425 ;;		_isr
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           
  4430                           ;psect for function _send
  4431  05A3                     _send:
  4432  05A3                     i1l1532:	
  4433                           ;incstack = 0
  4434                           ; Regs used in _send: [wreg-fsr0h+status,2+status,0]
  4435                           
  4436                           
  4437                           ;master.c: 217:     switch (z){
  4438  05A3  2DCC               	goto	i1l1568
  4439  05A4                     i1l1534:
  4440                           
  4441                           ;master.c: 219:             TXREG = POT1_Uas;
  4442  05A4  0870               	movf	_POT1_Uas,w
  4443  05A5  0099               	movwf	25	;volatile
  4444                           
  4445                           ;master.c: 220:             break;
  4446  05A6  2E02               	goto	i1l182
  4447  05A7                     i1l1538:
  4448                           
  4449                           ;master.c: 225:             TXREG = 0x2E;
  4450  05A7  302E               	movlw	46
  4451  05A8  0099               	movwf	25	;volatile
  4452                           
  4453                           ;master.c: 226:             break;
  4454  05A9  2E02               	goto	i1l182
  4455  05AA                     i1l1540:
  4456                           
  4457                           ;master.c: 228:             TXREG = POT1_Tas;
  4458  05AA  083B               	movf	_POT1_Tas,w
  4459  05AB  0099               	movwf	25	;volatile
  4460                           
  4461                           ;master.c: 229:             break;
  4462  05AC  2E02               	goto	i1l182
  4463  05AD                     i1l1542:
  4464                           
  4465                           ;master.c: 231:             TXREG = POT1_Has;
  4466  05AD  083C               	movf	_POT1_Has,w
  4467  05AE  0099               	movwf	25	;volatile
  4468                           
  4469                           ;master.c: 232:             break;
  4470  05AF  2E02               	goto	i1l182
  4471  05B0                     i1l1544:
  4472                           
  4473                           ;master.c: 234:             TXREG = 0x20;
  4474  05B0  3020               	movlw	32
  4475  05B1  0099               	movwf	25	;volatile
  4476                           
  4477                           ;master.c: 235:             break;
  4478  05B2  2E02               	goto	i1l182
  4479  05B3                     i1l1546:
  4480                           
  4481                           ;master.c: 237:             TXREG = sign;
  4482  05B3  084A               	movf	_sign,w
  4483  05B4  0099               	movwf	25	;volatile
  4484                           
  4485                           ;master.c: 238:             break;
  4486  05B5  2E02               	goto	i1l182
  4487  05B6                     i1l1548:
  4488                           
  4489                           ;master.c: 240:             TXREG = TEM_UAS;
  4490  05B6  0874               	movf	_TEM_UAS,w
  4491  05B7  0099               	movwf	25	;volatile
  4492                           
  4493                           ;master.c: 241:             break;
  4494  05B8  2E02               	goto	i1l182
  4495  05B9                     i1l1550:
  4496                           
  4497                           ;master.c: 243:             TXREG = TEM_TAS;
  4498  05B9  0873               	movf	_TEM_TAS,w
  4499  05BA  0099               	movwf	25	;volatile
  4500                           
  4501                           ;master.c: 244:             break;
  4502  05BB  2E02               	goto	i1l182
  4503  05BC                     i1l1552:
  4504                           
  4505                           ;master.c: 246:             TXREG = TEM_HAS;
  4506  05BC  0872               	movf	_TEM_HAS,w
  4507  05BD  0099               	movwf	25	;volatile
  4508                           
  4509                           ;master.c: 247:             break;
  4510  05BE  2E02               	goto	i1l182
  4511  05BF                     i1l1556:
  4512                           
  4513                           ;master.c: 252:             TXREG = cont_1AS;
  4514  05BF  0871               	movf	_cont_1AS,w
  4515  05C0  0099               	movwf	25	;volatile
  4516                           
  4517                           ;master.c: 253:             break;
  4518  05C1  2E02               	goto	i1l182
  4519  05C2                     i1l1558:
  4520                           
  4521                           ;master.c: 255:             TXREG = cont_2AS;
  4522  05C2  083E               	movf	_cont_2AS,w
  4523  05C3  0099               	movwf	25	;volatile
  4524                           
  4525                           ;master.c: 256:             break;
  4526  05C4  2E02               	goto	i1l182
  4527  05C5                     i1l1560:
  4528                           
  4529                           ;master.c: 258:             TXREG = cont_3AS;
  4530  05C5  083D               	movf	_cont_3AS,w
  4531  05C6  0099               	movwf	25	;volatile
  4532                           
  4533                           ;master.c: 259:             break;
  4534  05C7  2E02               	goto	i1l182
  4535  05C8                     i1l1562:
  4536                           
  4537                           ;master.c: 261:              TXREG = 0x0D;
  4538  05C8  300D               	movlw	13
  4539  05C9  0099               	movwf	25	;volatile
  4540  05CA                     i1l1564:
  4541                           
  4542                           ;master.c: 262:              z=0;
  4543  05CA  01CD               	clrf	_z
  4544                           
  4545                           ;master.c: 263:             break;
  4546  05CB  2E02               	goto	i1l182
  4547  05CC                     i1l1568:
  4548  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  4549  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  4550  05CE  084D               	movf	_z,w
  4551  05CF  00F6               	movwf	??_send
  4552  05D0  01F7               	clrf	??_send+1
  4553                           
  4554                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4555                           ; Switch size 1, requested type "simple"
  4556                           ; Number of cases is 1, Range of values is 0 to 0
  4557                           ; switch strategies available:
  4558                           ; Name         Instructions Cycles
  4559                           ; simple_byte            4     3 (average)
  4560                           ; direct_byte           11     8 (fixed)
  4561                           ; jumptable            260     6 (fixed)
  4562                           ;	Chosen strategy is simple_byte
  4563  05D1  0877               	movf	??_send+1,w
  4564  05D2  3A00               	xorlw	0	; case 0
  4565  05D3  1903               	skipnz
  4566  05D4  2DD6               	goto	i1l2278
  4567  05D5  2DC8               	goto	i1l1562
  4568  05D6                     i1l2278:
  4569                           
  4570                           ; Switch size 1, requested type "simple"
  4571                           ; Number of cases is 14, Range of values is 0 to 13
  4572                           ; switch strategies available:
  4573                           ; Name         Instructions Cycles
  4574                           ; simple_byte           43    22 (average)
  4575                           ; direct_byte           50     8 (fixed)
  4576                           ; jumptable            260     6 (fixed)
  4577                           ;	Chosen strategy is simple_byte
  4578  05D6  0876               	movf	??_send,w
  4579  05D7  3A00               	xorlw	0	; case 0
  4580  05D8  1903               	skipnz
  4581  05D9  2DA4               	goto	i1l1534
  4582  05DA  3A01               	xorlw	1	; case 1
  4583  05DB  1903               	skipnz
  4584  05DC  2DA4               	goto	i1l1534
  4585  05DD  3A03               	xorlw	3	; case 2
  4586  05DE  1903               	skipnz
  4587  05DF  2DA7               	goto	i1l1538
  4588  05E0  3A01               	xorlw	1	; case 3
  4589  05E1  1903               	skipnz
  4590  05E2  2DAA               	goto	i1l1540
  4591  05E3  3A07               	xorlw	7	; case 4
  4592  05E4  1903               	skipnz
  4593  05E5  2DAD               	goto	i1l1542
  4594  05E6  3A01               	xorlw	1	; case 5
  4595  05E7  1903               	skipnz
  4596  05E8  2DB0               	goto	i1l1544
  4597  05E9  3A03               	xorlw	3	; case 6
  4598  05EA  1903               	skipnz
  4599  05EB  2DB3               	goto	i1l1546
  4600  05EC  3A01               	xorlw	1	; case 7
  4601  05ED  1903               	skipnz
  4602  05EE  2DB6               	goto	i1l1548
  4603  05EF  3A0F               	xorlw	15	; case 8
  4604  05F0  1903               	skipnz
  4605  05F1  2DB9               	goto	i1l1550
  4606  05F2  3A01               	xorlw	1	; case 9
  4607  05F3  1903               	skipnz
  4608  05F4  2DBC               	goto	i1l1552
  4609  05F5  3A03               	xorlw	3	; case 10
  4610  05F6  1903               	skipnz
  4611  05F7  2DB0               	goto	i1l1544
  4612  05F8  3A01               	xorlw	1	; case 11
  4613  05F9  1903               	skipnz
  4614  05FA  2DBF               	goto	i1l1556
  4615  05FB  3A07               	xorlw	7	; case 12
  4616  05FC  1903               	skipnz
  4617  05FD  2DC2               	goto	i1l1558
  4618  05FE  3A01               	xorlw	1	; case 13
  4619  05FF  1903               	skipnz
  4620  0600  2DC5               	goto	i1l1560
  4621  0601  2DC8               	goto	i1l1562
  4622  0602                     i1l182:
  4623  0602  0008               	return
  4624  0603                     __end_of_send:
  4625  007E                     btemp	set	126	;btemp
  4626  007E                     wtemp0	set	126
  4627                           
  4628                           	psect	config
  4629                           
  4630                           ;Config register CONFIG1 @ 0x2007
  4631                           ;	Oscillator Selection bits
  4632                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  4633                           ;	Watchdog Timer Enable bit
  4634                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4635                           ;	Power-up Timer Enable bit
  4636                           ;	PWRTE = OFF, PWRT disabled
  4637                           ;	RE3/MCLR pin function select bit
  4638                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  4639                           ;	Code Protection bit
  4640                           ;	CP = OFF, Program memory code protection is disabled
  4641                           ;	Data Code Protection bit
  4642                           ;	CPD = OFF, Data memory code protection is disabled
  4643                           ;	Brown Out Reset Selection bits
  4644                           ;	BOREN = OFF, BOR disabled
  4645                           ;	Internal External Switchover bit
  4646                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  4647                           ;	Fail-Safe Clock Monitor Enabled bit
  4648                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  4649                           ;	Low Voltage Programming Enable bit
  4650                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4651                           ;	In-Circuit Debugger Mode bit
  4652                           ;	DEBUG = 0x1, unprogrammed default
  4653  2007                     	org	8199
  4654  2007  20D4               	dw	8404
  4655                           
  4656                           ;Config register CONFIG2 @ 0x2008
  4657                           ;	Brown-out Reset Selection bit
  4658                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  4659                           ;	Flash Program Memory Self Write Enable bits
  4660                           ;	WRT = OFF, Write protection off
  4661  2008                     	org	8200
  4662  2008  3FFF               	dw	16383

Data Sizes:
    Strings     63
    Constant    0
    Data        0
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     27      49
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_POINT@D	PTR unsigned char  size(1) Largest target is 18
		 -> STR_23(CODE[2]), STR_22(CODE[2]), STR_21(CODE[3]), STR_20(CODE[2]), 
		 -> STR_19(CODE[2]), STR_18(CODE[2]), STR_17(CODE[2]), STR_16(CODE[2]), 
		 -> STR_15(CODE[2]), STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), 
		 -> STR_11(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), 
		 -> STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[18]), 

    LCD_P@D	PTR unsigned char  size(1) Largest target is 18
		 -> STR_23(CODE[2]), STR_22(CODE[2]), STR_21(CODE[3]), STR_20(CODE[2]), 
		 -> STR_19(CODE[2]), STR_18(CODE[2]), STR_17(CODE[2]), STR_16(CODE[2]), 
		 -> STR_15(CODE[2]), STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), 
		 -> STR_11(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), 
		 -> STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[18]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_send

Critical Paths under _main in BANK0

    _main->_CONV
    _LCD_IN->_LCD_ON
    _LCD_CL->_LCD_ON
    _LCDVAL1->_LCD_POINT
    _LCD_POINT->_LCD_P
    _LCD_P->_LCD_PLAY
    _CONVET_cont->___awdiv
    _CONV->___awdiv
    _CONT->___awdiv
    ___awdiv->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   30080
                                             25 BANK0      2     2      0
                               _CONT
                               _CONV
                        _CONVET_cont
                            _CONV_AS
                            _LCDVAL1
                             _LCD_CL
                             _LCD_IN
                          _LCD_POINT
                            _SET_RXT
                            _SET_TXR
                              _Setup
                            _spiInit
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     456
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SET_TXR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SET_RXT                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_IN                                               2     2      0      31
                                              3 BANK0      2     2      0
                             _LCD_ON
 ---------------------------------------------------------------------------------
 (1) _LCD_CL                                               0     0      0      31
                             _LCD_ON
 ---------------------------------------------------------------------------------
 (1) _LCDVAL1                                              5     1      4    9261
                                             11 BANK0      5     1      4
                          _LCD_POINT
 ---------------------------------------------------------------------------------
 (1) _LCD_POINT                                            7     2      5    6568
                                              4 BANK0      7     2      5
                             _LCD_ON
                              _LCD_P
 ---------------------------------------------------------------------------------
 (2) _LCD_P                                                2     2      0     132
                                              2 BANK0      2     2      0
                           _LCD_PLAY
 ---------------------------------------------------------------------------------
 (3) _LCD_PLAY                                             2     2      0      31
                                              0 BANK0      2     2      0
                            _LCD_TIM
 ---------------------------------------------------------------------------------
 (2) _LCD_ON                                               3     3      0      31
                                              0 BANK0      3     3      0
                            _LCD_TIM
 ---------------------------------------------------------------------------------
 (4) _LCD_TIM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CONV_AS                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _CONVET_cont                                          4     4      0    4556
                                             15 BANK0      4     4      0
                            ___awdiv
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _CONV                                                10    10      0    4590
                                             15 BANK0     10    10      0
                            ___awdiv
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _CONT                                                 4     4      0    4556
                                             15 BANK0      4     4      0
                            ___awdiv
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1576
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     856
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    2124
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  4     4      0       0
                                              2 COMMON     4     4      0
                               _send
 ---------------------------------------------------------------------------------
 (7) _send                                                 2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CONT
     ___awdiv
       ___wmul (ARG)
     ___bmul
     ___wmul
   _CONV
     ___awdiv
       ___wmul (ARG)
     ___bmul
     ___wmul
   _CONVET_cont
     ___awdiv
       ___wmul (ARG)
     ___bmul
     ___wmul
   _CONV_AS
   _LCDVAL1
     _LCD_POINT
       _LCD_ON
         _LCD_TIM
       _LCD_P
         _LCD_PLAY
           _LCD_TIM
   _LCD_CL
     _LCD_ON
       _LCD_TIM
   _LCD_IN
     _LCD_ON
       _LCD_TIM
   _LCD_POINT
     _LCD_ON
       _LCD_TIM
     _LCD_P
       _LCD_PLAY
         _LCD_TIM
   _SET_RXT
   _SET_TXR
   _Setup
   _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite

 _isr (ROOT)
   _send

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1B      31       5       61.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3D      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sat Feb 13 02:44:02 2021

                      _C 004C                        _L 0050                        _R 004F  
                      _Z 004E                        _c 004B                        _r 0075  
                      _z 004D                        pc 0002           ___bmul@product 0022  
            _SSPSTATbits 0094             ___awdiv@sign 002C                       fsr 0004  
    ___wmul@multiplicand 0022                      l202 0F97                      l301 0FD5  
                    l205 0F9D                      l141 028F                      l142 02EC  
                    l151 0539                      l304 0FB9                      l216 0FAE  
                    l208 0F8F                      l233 0735                      l162 0707  
                    l242 0FE8                      l251 07AA                      l139 0238  
                    l156 048B                      l236 07FF                      l148 07CB  
                    l245 0F96                      l406 076F                      l159 0661  
                    l239 0FC6                      l432 0FFF                      l408 0787  
                    l259 0760                      l286 01F9                      l198 07E4  
                    l199 07E9                      l559 05A2                      u400 0594  
                    u320 0541                      u401 0593                      u321 0540  
                    u410 0599                      u330 054C                      u411 0598  
                    u331 054B                      u340 055D                      u341 055C  
                    u360 056F                      u520 0783                      u361 056E  
                    u521 0782                      u505 0770                      u530 0FF1  
                    u355 0561                      u531 0FF0                      u515 0777  
                    u380 0580                      u540 0FFE                      u381 057F  
                    u541 0FFD                      u470 07AA                      u550 07D8  
                    u375 0570                      u471 07A9                      u551 07D7  
                    u560 0378                      u480 0F9D                      u385 057C  
                    u561 0377                      u481 0F9C                      u490 0769  
                    u395 0588                      u491 0768                      u577 0718  
                    u587 0FE5                      u597 07FB                      _bro 0049  
                    _isr 06A7                      fsr0 0004                      indf 0000  
           LCD_POINT@LOC 002A          __end_of_LCDVAL1 01FA          __end_of_CONV_AS 0708  
        __end_of_LCD_TIM 0FC7                     l2000 07BD                     l2010 07C2  
                   l2002 07BE                     l2020 07C9                     l2012 07C5  
                   l2004 07BF                     l2110 036C                     l2102 01B1  
                   l2030 0710                     l2022 07CA                     l2014 07C6  
                   l2006 07C0                     l2120 0483                     l2112 0378  
                   l2040 072F                     l2032 0712                     l2024 0708  
                   l2016 07C7                     l2008 07C1                     l2122 0487  
                   l2114 03F9                     l2042 0F90                     l2034 071D  
                   l2026 070C                     l2018 07C8                     l2130 0204  
                   l1500 0551                     l2116 03FD                     l2108 048C  
                   l2052 0603                     l2124 06D8                     l2060 0049  
                   l2036 0723                     l2028 070D                     l2044 0F8D  
                   l2140 0233                     l2132 0212                     l1510 0567  
                   l1502 0555                     l2118 0402                     l2070 00A3  
                   l2062 005B                     l2054 0024                     l2038 0729  
                   l2046 0FA6                     l2150 0252                     l2142 0236  
                   l2134 0217                     l2126 01FA                     l1520 0587  
                   l1512 056B                     l1504 0557                     l2080 00FD  
                   l2072 00B5                     l2064 006D                     l2056 0025  
                   l2048 0FAB                     l2160 02A7                     l2152 0264  
                   l2144 023B                     l2136 021C                     l2128 01FF  
                   l1522 058E                     l1514 056F                     l1506 055D  
                   l2090 0157                     l2082 010F                     l2074 00C7  
                   l2066 007F                     l2058 0037                     l2170 02EF  
                   l2162 02B8                     l2154 0276                     l2146 024B  
                   l2138 0221                     l1516 0580                     l1508 0560  
                   l1524 0594                     l2092 0169                     l2084 0121  
                   l2076 00D9                     l2068 0091                     l2180 034A  
                   l2172 02FF                     l2164 02C7                     l2156 0288  
                   l2148 024D                     l1526 0599                     l1518 0586  
                   l2094 017B                     l2086 0133                     l2078 00EB  
                   l2174 030F                     l2166 02D9                     l2158 0292  
                   l1528 059E                     l2096 018D                     l2088 0145  
                   l2272 0358                     l2176 0321                     l2184 034E  
                   l1490 053D                     l2274 01B8                     l2098 019F  
                   l2178 0333                     l2186 0363                     l1492 0541  
                   l1900 0FDA                     l2276 074A                     l1494 0546  
                   l1910 07F0                     l1902 0FDC                     l1496 0548  
                   l1488 053A                     l1912 07F5                     l1904 0FE1  
                   l1920 079E                     l1498 054C                     l1906 07ED  
                   l1914 078B                     l1922 0736                     l1908 07EE  
                   l1916 078C                     l1924 0737                     l1932 0743  
                   l1950 0776                     l1918 0798                     l1926 073D  
                   l1934 0752                     l1942 0F97                     l1960 0FED  
                   l1952 077D                     l1944 0761                     l1936 0758  
                   l1962 0FF1                     l1954 0783                     l1946 0765  
                   l1964 0FF5                     l1948 0769                     l1972 0FC7  
                   l1980 07CF                     l1966 0FF7                     l1958 0FEC  
                   l1974 0FD0                     l1990 07AB                     l1982 07D8  
                   l1968 0FFE                     l1896 0FBA                     l1976 0FD4  
                   l1992 07B6                     l1984 07DC                     l1898 0FD9  
                   l1978 0FAF                     l1994 07B8                     l1986 07DE  
                   l1996 07B9                     l1988 07E3                     l1998 07BA  
                   ?_isr 0076                     STR_1 0668                     STR_2 0685  
                   STR_3 0687                     STR_4 0689                     STR_5 068B  
                   STR_6 068D                     STR_7 068F                     STR_8 0691  
                   STR_9 0693                     _CONT 036C                     _CONV 048C  
                   _TMR0 0001       __size_of_LCD_POINT 002B          __end_of_SET_RXT 0FBA  
        __end_of_SET_TXR 0FD6                     _cont 003F                     _main 01FA  
                   _send 05A3                     _sign 004A                     btemp 007E  
                   start 000E        ___bmul@multiplier 0023         __end_of_LCD_PLAY 0FE9  
                  ??_isr 0078                    ?_CONT 0076                    ?_CONV 0076  
                  ?_main 0076          __end_of___awdiv 05A3                    ?_send 0076  
                  STR_10 0695                    STR_11 0697                    STR_12 069B  
                  STR_20 0681                    STR_13 069D                    STR_21 067A  
                  STR_14 069F                    STR_22 067D                    STR_15 06A1  
                  STR_23 0699                    STR_16 06A3                    STR_17 06A5  
                  STR_18 0683                    STR_19 067F                    _ANSEL 0188  
        ___awdiv@divisor 0026                    _LCD_P 0788                    i1l132 06CF  
                  i1l182 0602          ___awdiv@counter 002B                    _TEM_H 0043  
                  _SPBRG 0099                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _PORTD 0008                    _PORTE 0009  
                  _TEM_T 0044                    _TEM_U 0045                    u44_20 06AD  
                  u44_21 06AC                    u45_20 06BD                    u45_21 06BC  
                  u46_20 06CB                    u46_21 06CA                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
                  _TRISE 0089                    _TXREG 0019                    _Setup 07AB  
                  pclath 000A          __end_of_spiInit 07EA          __end_of_spiRead 0FAF  
                  status 0003                    wtemp0 007E             __end_of_CONT 048C  
           __end_of_CONV 053A          __initialization 0011             __end_of_main 036C  
           __end_of_send 0603                   ??_CONT 002F                   ??_CONV 002F  
      __end_of_LCD_POINT 0761                   ??_main 0039                   ??_send 0076  
              ??_LCDVAL1 002F                   ?_LCD_P 0076                   LCD_P@D 0023  
              ??_CONV_AS 0020                ??_LCD_TIM 0020                   ?_Setup 0076  
              ??_SET_RXT 0020                ??_SET_TXR 0020         ___awdiv@dividend 0028  
                 _ANSELH 0189     __size_of_CONVET_cont 005F                   _LCD_CL 0F90  
                 _LCD_IN 0708                   _LCD_ON 07EA                   i1l1540 05AA  
                 i1l1532 05A3                   i1l1550 05B9                   i1l1542 05AD  
                 i1l1534 05A4                   i1l1560 05C5                   i1l1552 05BC  
                 i1l1544 05B0                   i1l1562 05C8                   i1l1546 05B3  
                 i1l1538 05A7                   i1l1730 06AD                   i1l1564 05CA  
                 i1l1556 05BF                   i1l1548 05B6                   i1l1740 06C0  
                 i1l1732 06B1                   i1l2278 05D6                   i1l1558 05C2  
                 i1l1742 06C1                   i1l1734 06B6                   i1l1568 05CC  
                 i1l1744 06C5                   i1l1736 06B9                   i1l1728 06A7  
                 i1l1746 06CB                   i1l1738 06BD                   i1l1748 06CC  
                 _POT1_H 0047                   _POT1_T 0046                   _POT1_U 0048  
                 _SPBRGH 009A                   _TRISC3 043B                   _TRISC5 043D  
                 _SSPCON 0014                   _SSPBUF 0013                   ___bmul 0FE9  
                 ___wmul 0761                ??___awdiv 002A                   _cont_1 0042  
                 _cont_2 0041                   _cont_3 0040         ___awdiv@quotient 002D  
                 saved_w 007E         __end_of_spiWrite 0F90                ??_spiInit 0023  
              ??_spiRead 0020                ?_LCD_PLAY 0076  __end_of__initialization 0020  
              LCD_PLAY@D 0021            __end_of_LCD_P 07AB      ___bmul@multiplicand 0020  
         __pcstackCOMMON 0076            __end_of_Setup 07CC                  ??_LCD_P 0022  
         _OPTION_REGbits 0081                  ??_Setup 0020                  ?_LCD_CL 0076  
             __pbssBANK0 003B                  ?_LCD_IN 0076                  ?_LCD_ON 0076  
                LCD_ON@C 0022               ??_LCD_PLAY 0020               __pmaintext 01FA  
                ?___bmul 0020                  ?___wmul 0020               __pintentry 0004  
__size_of_spiReceiveWait 0007                  _LCDVAL1 0024                  _CONV_AS 06D8  
                _LCD_TIM 0FBA                  _TEM_HAS 0072                  _TEM_TAS 0073  
                _TEM_UAS 0074                  _SET_RXT 0FAF                  _SET_TXR 0FC7  
                _SSPSTAT 0094               __stringtab 0662          __size_of_LCD_CL 0007  
        __size_of_LCD_IN 002E          __size_of_LCD_ON 0016                ?_spiWrite 0076  
        __size_of___bmul 0017                _CONV$1331 0037                  ___awdiv 053A  
        __size_of___wmul 0027                  __ptext1 0F8A                  __ptext2 0FA6  
                __ptext3 0F97                  __ptext4 07CC                  __ptext5 07AB  
                __ptext6 0FC7                  __ptext7 0FAF                  __ptext8 0708  
                __ptext9 0F90             __size_of_isr 0031                _LCD_POINT 0736  
                _spiInit 07CC                  _spiRead 0FA6                  clrloop0 0F9F  
   end_of_initialization 0020                _RCSTAbits 0018               ??_spiWrite 0020  
              _PORTDbits 0008                _PORTEbits 0009               ?_LCD_POINT 0024  
          ??_CONVET_cont 002F                _TRISDbits 0088              spiWrite@dat 0020  
             LCD_POINT@D 0028               LCD_POINT@x 0024               LCD_POINT@y 0026  
         __end_of_LCD_CL 0F97           __end_of_LCD_IN 0736           __end_of_LCD_ON 0800  
              _TXSTAbits 0098        __size_of_LCD_PLAY 0013           _spiReceiveWait 0F97  
         __end_of___bmul 1000           __end_of___wmul 0788              _BAUDCTLbits 0187  
    start_initialization 0011              __end_of_isr 06D8                 ??_LCD_CL 0023  
               ??_LCD_IN 0023                 ??_LCD_ON 0020      __end_of_CONVET_cont 0662  
 __end_of_spiReceiveWait 0F9E                 ??___bmul 0021                 ??___wmul 0024  
               LCDVAL1@Z 002D                 LCDVAL1@x 002B                 ?_LCDVAL1 002B  
               ?_CONV_AS 0076                 ?_LCD_TIM 0076              __pbssCOMMON 0070  
              ___latbits 0002              ??_LCD_POINT 0029            __pcstackBANK0 0020  
               ?_SET_RXT 0076                 ?_SET_TXR 0076          ?_spiReceiveWait 0076  
               ?___awdiv 0026        __size_of_spiWrite 0006                __pstrings 0662  
         __size_of_LCD_P 0023                 ?_spiInit 0020                 ?_spiRead 0076  
            _CONVET_cont 0603           __size_of_Setup 0021                 _LCD_PLAY 0FD6  
   spiInit@sTransmitEdge 0022        interrupt_function 0004           ___wmul@product 0024  
              clear_ram0 0F9E                 _PIE1bits 008C       spiInit@sDataSample 0020  
               _PIR1bits 000C                 _POT1_Has 003C                 _POT1_Tas 003B  
               _POT1_Uas 0070              __stringbase 0667        ___wmul@multiplier 0020  
       __size_of_LCDVAL1 01D6         __size_of_CONV_AS 0030         __size_of_LCD_TIM 000D  
       __size_of_SET_RXT 000B         __size_of_SET_TXR 000F         __size_of___awdiv 0069  
     __end_of__stringtab 0668                 __ptext10 0024                 __ptext11 0736  
               __ptext20 0761                 __ptext12 0788                 __ptext21 0FE9  
               __ptext13 0FD6                 __ptext22 053A                 __ptext14 07EA  
               __ptext23 06A7                 __ptext15 0FBA                 __ptext24 05A3  
               __ptext16 06D8                 __ptext17 0603                 __ptext18 048C  
               __ptext19 036C         __size_of_spiInit 001E         __size_of_spiRead 0009  
               _cont_1AS 0071                 _cont_2AS 003E                 _cont_3AS 003D  
          __size_of_CONT 0120            __size_of_CONV 00AE            __size_of_main 0172  
          __size_of_send 0060                 _spiWrite 0F8A             spiInit@sType 0023  
      spiInit@sClockIdle 0021               _INTCONbits 000B                 intlevel1 0000  
       ??_spiReceiveWait 0020                stringcode 0662               _OSCCONbits 008F  
               stringdir 0662                 stringtab 0662             ?_CONVET_cont 0076  
